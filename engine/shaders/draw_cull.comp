#version 460
#include "lib/common.glsl"
#include "lib/object.glsl"
#include "lib/ubo.glsl"

layout (constant_id = 0) const bool k_late = false;

layout (local_size_x = 32) in;

DECLARE_UBO(0, 0);
DECLARE_DRAW_BUFFER_WRITABLE(0, 3);
DECLARE_OBJECT_BUFFER(0, 1);
layout (binding = 4) uniform sampler2D g_depth_pyramid;
layout (binding = 2) restrict buffer ObjectVisibility {
    uint g_visibility[];
};

shared uint s_draw_offset;

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere
// https://jcgt.org/published/0002/02/05/paper.pdf
bool project_sphere(vec3 center, float radius, out vec4 ndc_aabb) {
    float near_plane = g_proj[3][2];
    if (-center.z < radius + near_plane) {
        return false;
    }

    vec2 cx = -center.xz;
    vec2 vx = vec2(sqrt(dot(cx, cx) - radius * radius), radius);
    vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
    vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

    vec2 cy = -center.yz;
    vec2 vy = vec2(sqrt(dot(cy, cy) - radius * radius), radius);
    vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
    vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

    float P00 = g_proj[0][0];
    float P11 = g_proj[1][1];
    ndc_aabb = 0.5f - 0.5f * vec4(
        minx.x / minx.y * P00, miny.x / miny.y * P11,
        maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
    return true;
}

void main() {
    uint object_index = gl_GlobalInvocationID.x;
    if (object_index >= g_object_count) {
        return;
    }

    // Early pass - ignore objects not visible last frame.
    uint object_bit = object_index % gl_WorkGroupSize.x;
    uint object_mask = 1 << object_bit;
    bool culled_last_frame = (g_visibility[gl_WorkGroupID.x] & object_mask) == 0;
    if (!k_late && culled_last_frame) {
        return;
    }

    Object object = g_objects[object_index];
    mat4 transform = object.transform;
    vec4 center = transform * vec4(object.center[0], object.center[1], object.center[2], 1.0f);

    // Calculate sphere radius, making sure to take object scale into account.
    vec3 scale = vec3(length(transform[0].xyz), length(transform[1].xyz), length(transform[2].xyz));
    float radius = object.radius * max(scale.x, max(scale.y, scale.z));

    // Frustum cull against the bounding sphere.
    bool visible = true;
    for (uint i = 0; i < 4; i++) {
        visible = visible && dot(center, g_frustum_planes[i]) + radius >= 0.0f;
    }

    // Late pass - do occlusion culling.
    if (k_late) {
        // Reproject sphere center into view space.
        center = g_cull_view * center;

        vec4 ndc_aabb;
        if (project_sphere(center.xyz, radius, ndc_aabb)) {
            // Inside view.
            vec2 size = (ndc_aabb.zw - ndc_aabb.xy) * textureSize(g_depth_pyramid, 0);
            float level = floor(log2(max(size.x, size.y)));
            float occluder_depth = textureLod(g_depth_pyramid, (ndc_aabb.xy + ndc_aabb.zw) * 0.5f, level).r;
            float sphere_depth = g_proj[3][2] / (-center.z - radius);
            visible = visible && occluder_depth < sphere_depth;
        }
    }

    // Early pass - draw all visible objects.
    // Late pass - only draw if visible *and* not visible last frame (and therefore wasn't drawn in the early pass).
    bool should_draw = visible && (!k_late || culled_last_frame);
    uvec4 should_draw_ballot = subgroupBallot(should_draw);
    if (subgroupElect()) {
        uint subgroup_draw_count = subgroupBallotBitCount(should_draw_ballot);
        s_draw_offset = atomicAdd(g_draw_count, subgroup_draw_count);
    }
    subgroupMemoryBarrierShared();

    if (should_draw) {
        // subgroupBallotExclusiveBitCount == how many invocations before us (those with a lower id), have their bit set
        // in the ballot (where set means they need a draw index reserving).
        uint draw_index = s_draw_offset + subgroupBallotExclusiveBitCount(should_draw_ballot);
        g_draws[draw_index].index_count = object.index_count;
        g_draws[draw_index].instance_count = 1;
        g_draws[draw_index].first_index = object.first_index;
        g_draws[draw_index].vertex_offset = object.vertex_offset;
        g_draws[draw_index].first_instance = 0;
        g_draws[draw_index].object_index = object_index;
    }

    if (k_late) {
        // Optimised version of if (visible) visibility |= object_mask;
        g_visibility[gl_WorkGroupID.x] = subgroupOr(uint(visible) << object_bit);
    }
}
