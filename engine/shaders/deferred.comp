#version 460
#include "lib/common.glsl"
#include "lib/gbuffer.glsl"
#include "lib/lighting.glsl"
#include "lib/shadow.glsl"
#include "lib/ubo.glsl"

layout (constant_id = 0) const uint k_tile_size = 0;

layout (local_size_x = 8, local_size_y = 8) in;

DECLARE_UBO(0, 0);
layout (binding = 1, std430) restrict readonly buffer Lights {
    uint g_light_count;
    PointLight g_lights[];
};
layout (binding = 6, rgba16f) restrict writeonly uniform image2D g_hdr_image;

layout (binding = 3) uniform texture2D g_albedo_image;
layout (binding = 4) uniform texture2D g_normal_image;
layout (binding = 5) uniform texture2D g_depth_image;
//layout (binding = 4) uniform sampler2DArrayShadow g_shadow_map;
layout (binding = 2) restrict readonly buffer LightVisibilities {
    LightVisibility g_light_visibilities[];
};

layout (push_constant) uniform PushConstants {
    uint g_row_tile_count;
};

void main() {
    float depth = texelFetch(g_depth_image, ivec2(gl_GlobalInvocationID.xy), 0).r;
    if (depth == 0.0f) {
        return;
    }

    // Compute tile index for light culling buckets.
    ivec2 tile_id = ivec2(gl_GlobalInvocationID.xy / k_tile_size);
    uint tile_index = tile_id.y * g_row_tile_count + tile_id.x;

    vec4 albedo = texelFetch(g_albedo_image, ivec2(gl_GlobalInvocationID.xy), 0);
    vec3 normal = decode_normal(texelFetch(g_normal_image, ivec2(gl_GlobalInvocationID.xy), 0).rg);

    vec4 world_position = vec4(gl_GlobalInvocationID.xy / vec2(g_viewport_width, g_viewport_height) * 2.0f - 1.0f, depth, 1.0f);
    world_position = g_inv_proj_view * world_position;
    world_position /= world_position.w;

    vec3 final_colour = albedo.rgb * 0.02f;
    vec3 view = normalize(g_view_position - world_position.xyz);

    // Sun.
    const vec3 sun_direction = vec3(0.6f, 0.6f, -0.6f);
#if 0
    float sun_shadow = compute_shadow(world_position, g_view, g_shadow_map, g_shadow_info);
#else
    float sun_shadow = 1.0f;
#endif
    final_colour += compute_light(albedo.rgb, vec3(1.0f), sun_direction, normal, view) * sun_shadow;

    // Point lights.
    for (uint i = 0; i < g_light_visibilities[tile_index].count; i++) {
        PointLight light = g_lights[g_light_visibilities[tile_index].indices[i]];
        vec3 direction = normalize(light.position - world_position.xyz);
        float dist = distance(light.position, world_position.xyz);
        float attenuation = clamp(1.0f - dist * dist / (light.radius * light.radius), 0.0f, 1.0f);
        final_colour += compute_light(albedo.rgb, light.colour, direction, normal, view) * attenuation;
    }

    // Final output.
    imageStore(g_hdr_image, ivec2(gl_GlobalInvocationID.xy), vec4(final_colour, 1.0f));
}
