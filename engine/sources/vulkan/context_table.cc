// File generated by tools/gen_vk.py
// NOLINTBEGIN
#include <vull/vulkan/context_table.hh>

namespace vull::vkb {

void ContextTable::load_loader(PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr) {
    m_vkCreateInstance = reinterpret_cast<PFN_vkCreateInstance>(vkGetInstanceProcAddr(nullptr, "vkCreateInstance"));
    m_vkEnumerateInstanceExtensionProperties = reinterpret_cast<PFN_vkEnumerateInstanceExtensionProperties>(vkGetInstanceProcAddr(nullptr, "vkEnumerateInstanceExtensionProperties"));
    m_vkEnumerateInstanceLayerProperties = reinterpret_cast<PFN_vkEnumerateInstanceLayerProperties>(vkGetInstanceProcAddr(nullptr, "vkEnumerateInstanceLayerProperties"));
    m_vkEnumerateInstanceVersion = reinterpret_cast<PFN_vkEnumerateInstanceVersion>(vkGetInstanceProcAddr(nullptr, "vkEnumerateInstanceVersion"));
}

void ContextTable::load_instance(PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr) {
    m_vkCreateDebugUtilsMessengerEXT = reinterpret_cast<PFN_vkCreateDebugUtilsMessengerEXT>(vkGetInstanceProcAddr(m_instance, "vkCreateDebugUtilsMessengerEXT"));
    m_vkCreateDevice = reinterpret_cast<PFN_vkCreateDevice>(vkGetInstanceProcAddr(m_instance, "vkCreateDevice"));
    m_vkCreateXcbSurfaceKHR = reinterpret_cast<PFN_vkCreateXcbSurfaceKHR>(vkGetInstanceProcAddr(m_instance, "vkCreateXcbSurfaceKHR"));
    m_vkDestroyDebugUtilsMessengerEXT = reinterpret_cast<PFN_vkDestroyDebugUtilsMessengerEXT>(vkGetInstanceProcAddr(m_instance, "vkDestroyDebugUtilsMessengerEXT"));
    m_vkDestroyInstance = reinterpret_cast<PFN_vkDestroyInstance>(vkGetInstanceProcAddr(m_instance, "vkDestroyInstance"));
    m_vkDestroySurfaceKHR = reinterpret_cast<PFN_vkDestroySurfaceKHR>(vkGetInstanceProcAddr(m_instance, "vkDestroySurfaceKHR"));
    m_vkEnumerateDeviceExtensionProperties = reinterpret_cast<PFN_vkEnumerateDeviceExtensionProperties>(vkGetInstanceProcAddr(m_instance, "vkEnumerateDeviceExtensionProperties"));
    m_vkEnumerateDeviceLayerProperties = reinterpret_cast<PFN_vkEnumerateDeviceLayerProperties>(vkGetInstanceProcAddr(m_instance, "vkEnumerateDeviceLayerProperties"));
    m_vkEnumeratePhysicalDeviceGroups = reinterpret_cast<PFN_vkEnumeratePhysicalDeviceGroups>(vkGetInstanceProcAddr(m_instance, "vkEnumeratePhysicalDeviceGroups"));
    m_vkEnumeratePhysicalDevices = reinterpret_cast<PFN_vkEnumeratePhysicalDevices>(vkGetInstanceProcAddr(m_instance, "vkEnumeratePhysicalDevices"));
    m_vkGetDeviceProcAddr = reinterpret_cast<PFN_vkGetDeviceProcAddr>(vkGetInstanceProcAddr(m_instance, "vkGetDeviceProcAddr"));
    m_vkGetPhysicalDeviceExternalBufferProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceExternalBufferProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceExternalBufferProperties"));
    m_vkGetPhysicalDeviceExternalFenceProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceExternalFenceProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceExternalFenceProperties"));
    m_vkGetPhysicalDeviceExternalSemaphoreProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceExternalSemaphoreProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceExternalSemaphoreProperties"));
    m_vkGetPhysicalDeviceFeatures = reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceFeatures"));
    m_vkGetPhysicalDeviceFeatures2 = reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures2>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceFeatures2"));
    m_vkGetPhysicalDeviceFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceFormatProperties"));
    m_vkGetPhysicalDeviceFormatProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties2>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceFormatProperties2"));
    m_vkGetPhysicalDeviceImageFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceImageFormatProperties"));
    m_vkGetPhysicalDeviceImageFormatProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties2>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceImageFormatProperties2"));
    m_vkGetPhysicalDeviceMemoryProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceMemoryProperties"));
    m_vkGetPhysicalDeviceMemoryProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties2>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceMemoryProperties2"));
    m_vkGetPhysicalDevicePresentRectanglesKHR = reinterpret_cast<PFN_vkGetPhysicalDevicePresentRectanglesKHR>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDevicePresentRectanglesKHR"));
    m_vkGetPhysicalDeviceProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceProperties"));
    m_vkGetPhysicalDeviceProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceProperties2>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceProperties2"));
    m_vkGetPhysicalDeviceQueueFamilyProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceQueueFamilyProperties"));
    m_vkGetPhysicalDeviceQueueFamilyProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties2>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceQueueFamilyProperties2"));
    m_vkGetPhysicalDeviceSparseImageFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceSparseImageFormatProperties"));
    m_vkGetPhysicalDeviceSparseImageFormatProperties2 = reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties2>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceSparseImageFormatProperties2"));
    m_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"));
    m_vkGetPhysicalDeviceSurfaceFormatsKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceFormatsKHR>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceSurfaceFormatsKHR"));
    m_vkGetPhysicalDeviceSurfacePresentModesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfacePresentModesKHR>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceSurfacePresentModesKHR"));
    m_vkGetPhysicalDeviceSurfaceSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceSupportKHR>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceSurfaceSupportKHR"));
    m_vkGetPhysicalDeviceToolProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceToolProperties>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceToolProperties"));
    m_vkGetPhysicalDeviceXcbPresentationSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR>(vkGetInstanceProcAddr(m_instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR"));
    m_vkSubmitDebugUtilsMessageEXT = reinterpret_cast<PFN_vkSubmitDebugUtilsMessageEXT>(vkGetInstanceProcAddr(m_instance, "vkSubmitDebugUtilsMessageEXT"));
}

void ContextTable::load_device() {
    m_vkAcquireNextImage2KHR = reinterpret_cast<PFN_vkAcquireNextImage2KHR>(vkGetDeviceProcAddr("vkAcquireNextImage2KHR"));
    m_vkAcquireNextImageKHR = reinterpret_cast<PFN_vkAcquireNextImageKHR>(vkGetDeviceProcAddr("vkAcquireNextImageKHR"));
    m_vkAllocateCommandBuffers = reinterpret_cast<PFN_vkAllocateCommandBuffers>(vkGetDeviceProcAddr("vkAllocateCommandBuffers"));
    m_vkAllocateDescriptorSets = reinterpret_cast<PFN_vkAllocateDescriptorSets>(vkGetDeviceProcAddr("vkAllocateDescriptorSets"));
    m_vkAllocateMemory = reinterpret_cast<PFN_vkAllocateMemory>(vkGetDeviceProcAddr("vkAllocateMemory"));
    m_vkBeginCommandBuffer = reinterpret_cast<PFN_vkBeginCommandBuffer>(vkGetDeviceProcAddr("vkBeginCommandBuffer"));
    m_vkBindBufferMemory = reinterpret_cast<PFN_vkBindBufferMemory>(vkGetDeviceProcAddr("vkBindBufferMemory"));
    m_vkBindBufferMemory2 = reinterpret_cast<PFN_vkBindBufferMemory2>(vkGetDeviceProcAddr("vkBindBufferMemory2"));
    m_vkBindImageMemory = reinterpret_cast<PFN_vkBindImageMemory>(vkGetDeviceProcAddr("vkBindImageMemory"));
    m_vkBindImageMemory2 = reinterpret_cast<PFN_vkBindImageMemory2>(vkGetDeviceProcAddr("vkBindImageMemory2"));
    m_vkCmdBeginDebugUtilsLabelEXT = reinterpret_cast<PFN_vkCmdBeginDebugUtilsLabelEXT>(vkGetDeviceProcAddr("vkCmdBeginDebugUtilsLabelEXT"));
    m_vkCmdBeginQuery = reinterpret_cast<PFN_vkCmdBeginQuery>(vkGetDeviceProcAddr("vkCmdBeginQuery"));
    m_vkCmdBeginRenderPass = reinterpret_cast<PFN_vkCmdBeginRenderPass>(vkGetDeviceProcAddr("vkCmdBeginRenderPass"));
    m_vkCmdBeginRenderPass2 = reinterpret_cast<PFN_vkCmdBeginRenderPass2>(vkGetDeviceProcAddr("vkCmdBeginRenderPass2"));
    m_vkCmdBeginRendering = reinterpret_cast<PFN_vkCmdBeginRendering>(vkGetDeviceProcAddr("vkCmdBeginRendering"));
    m_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = reinterpret_cast<PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT>(vkGetDeviceProcAddr("vkCmdBindDescriptorBufferEmbeddedSamplersEXT"));
    m_vkCmdBindDescriptorBuffersEXT = reinterpret_cast<PFN_vkCmdBindDescriptorBuffersEXT>(vkGetDeviceProcAddr("vkCmdBindDescriptorBuffersEXT"));
    m_vkCmdBindDescriptorSets = reinterpret_cast<PFN_vkCmdBindDescriptorSets>(vkGetDeviceProcAddr("vkCmdBindDescriptorSets"));
    m_vkCmdBindIndexBuffer = reinterpret_cast<PFN_vkCmdBindIndexBuffer>(vkGetDeviceProcAddr("vkCmdBindIndexBuffer"));
    m_vkCmdBindPipeline = reinterpret_cast<PFN_vkCmdBindPipeline>(vkGetDeviceProcAddr("vkCmdBindPipeline"));
    m_vkCmdBindVertexBuffers = reinterpret_cast<PFN_vkCmdBindVertexBuffers>(vkGetDeviceProcAddr("vkCmdBindVertexBuffers"));
    m_vkCmdBindVertexBuffers2 = reinterpret_cast<PFN_vkCmdBindVertexBuffers2>(vkGetDeviceProcAddr("vkCmdBindVertexBuffers2"));
    m_vkCmdBlitImage = reinterpret_cast<PFN_vkCmdBlitImage>(vkGetDeviceProcAddr("vkCmdBlitImage"));
    m_vkCmdBlitImage2 = reinterpret_cast<PFN_vkCmdBlitImage2>(vkGetDeviceProcAddr("vkCmdBlitImage2"));
    m_vkCmdClearAttachments = reinterpret_cast<PFN_vkCmdClearAttachments>(vkGetDeviceProcAddr("vkCmdClearAttachments"));
    m_vkCmdClearColorImage = reinterpret_cast<PFN_vkCmdClearColorImage>(vkGetDeviceProcAddr("vkCmdClearColorImage"));
    m_vkCmdClearDepthStencilImage = reinterpret_cast<PFN_vkCmdClearDepthStencilImage>(vkGetDeviceProcAddr("vkCmdClearDepthStencilImage"));
    m_vkCmdCopyBuffer = reinterpret_cast<PFN_vkCmdCopyBuffer>(vkGetDeviceProcAddr("vkCmdCopyBuffer"));
    m_vkCmdCopyBuffer2 = reinterpret_cast<PFN_vkCmdCopyBuffer2>(vkGetDeviceProcAddr("vkCmdCopyBuffer2"));
    m_vkCmdCopyBufferToImage = reinterpret_cast<PFN_vkCmdCopyBufferToImage>(vkGetDeviceProcAddr("vkCmdCopyBufferToImage"));
    m_vkCmdCopyBufferToImage2 = reinterpret_cast<PFN_vkCmdCopyBufferToImage2>(vkGetDeviceProcAddr("vkCmdCopyBufferToImage2"));
    m_vkCmdCopyImage = reinterpret_cast<PFN_vkCmdCopyImage>(vkGetDeviceProcAddr("vkCmdCopyImage"));
    m_vkCmdCopyImage2 = reinterpret_cast<PFN_vkCmdCopyImage2>(vkGetDeviceProcAddr("vkCmdCopyImage2"));
    m_vkCmdCopyImageToBuffer = reinterpret_cast<PFN_vkCmdCopyImageToBuffer>(vkGetDeviceProcAddr("vkCmdCopyImageToBuffer"));
    m_vkCmdCopyImageToBuffer2 = reinterpret_cast<PFN_vkCmdCopyImageToBuffer2>(vkGetDeviceProcAddr("vkCmdCopyImageToBuffer2"));
    m_vkCmdCopyQueryPoolResults = reinterpret_cast<PFN_vkCmdCopyQueryPoolResults>(vkGetDeviceProcAddr("vkCmdCopyQueryPoolResults"));
    m_vkCmdDispatch = reinterpret_cast<PFN_vkCmdDispatch>(vkGetDeviceProcAddr("vkCmdDispatch"));
    m_vkCmdDispatchBase = reinterpret_cast<PFN_vkCmdDispatchBase>(vkGetDeviceProcAddr("vkCmdDispatchBase"));
    m_vkCmdDispatchIndirect = reinterpret_cast<PFN_vkCmdDispatchIndirect>(vkGetDeviceProcAddr("vkCmdDispatchIndirect"));
    m_vkCmdDraw = reinterpret_cast<PFN_vkCmdDraw>(vkGetDeviceProcAddr("vkCmdDraw"));
    m_vkCmdDrawIndexed = reinterpret_cast<PFN_vkCmdDrawIndexed>(vkGetDeviceProcAddr("vkCmdDrawIndexed"));
    m_vkCmdDrawIndexedIndirect = reinterpret_cast<PFN_vkCmdDrawIndexedIndirect>(vkGetDeviceProcAddr("vkCmdDrawIndexedIndirect"));
    m_vkCmdDrawIndexedIndirectCount = reinterpret_cast<PFN_vkCmdDrawIndexedIndirectCount>(vkGetDeviceProcAddr("vkCmdDrawIndexedIndirectCount"));
    m_vkCmdDrawIndirect = reinterpret_cast<PFN_vkCmdDrawIndirect>(vkGetDeviceProcAddr("vkCmdDrawIndirect"));
    m_vkCmdDrawIndirectCount = reinterpret_cast<PFN_vkCmdDrawIndirectCount>(vkGetDeviceProcAddr("vkCmdDrawIndirectCount"));
    m_vkCmdEndDebugUtilsLabelEXT = reinterpret_cast<PFN_vkCmdEndDebugUtilsLabelEXT>(vkGetDeviceProcAddr("vkCmdEndDebugUtilsLabelEXT"));
    m_vkCmdEndQuery = reinterpret_cast<PFN_vkCmdEndQuery>(vkGetDeviceProcAddr("vkCmdEndQuery"));
    m_vkCmdEndRenderPass = reinterpret_cast<PFN_vkCmdEndRenderPass>(vkGetDeviceProcAddr("vkCmdEndRenderPass"));
    m_vkCmdEndRenderPass2 = reinterpret_cast<PFN_vkCmdEndRenderPass2>(vkGetDeviceProcAddr("vkCmdEndRenderPass2"));
    m_vkCmdEndRendering = reinterpret_cast<PFN_vkCmdEndRendering>(vkGetDeviceProcAddr("vkCmdEndRendering"));
    m_vkCmdExecuteCommands = reinterpret_cast<PFN_vkCmdExecuteCommands>(vkGetDeviceProcAddr("vkCmdExecuteCommands"));
    m_vkCmdFillBuffer = reinterpret_cast<PFN_vkCmdFillBuffer>(vkGetDeviceProcAddr("vkCmdFillBuffer"));
    m_vkCmdInsertDebugUtilsLabelEXT = reinterpret_cast<PFN_vkCmdInsertDebugUtilsLabelEXT>(vkGetDeviceProcAddr("vkCmdInsertDebugUtilsLabelEXT"));
    m_vkCmdNextSubpass = reinterpret_cast<PFN_vkCmdNextSubpass>(vkGetDeviceProcAddr("vkCmdNextSubpass"));
    m_vkCmdNextSubpass2 = reinterpret_cast<PFN_vkCmdNextSubpass2>(vkGetDeviceProcAddr("vkCmdNextSubpass2"));
    m_vkCmdPipelineBarrier = reinterpret_cast<PFN_vkCmdPipelineBarrier>(vkGetDeviceProcAddr("vkCmdPipelineBarrier"));
    m_vkCmdPipelineBarrier2 = reinterpret_cast<PFN_vkCmdPipelineBarrier2>(vkGetDeviceProcAddr("vkCmdPipelineBarrier2"));
    m_vkCmdPushConstants = reinterpret_cast<PFN_vkCmdPushConstants>(vkGetDeviceProcAddr("vkCmdPushConstants"));
    m_vkCmdResetEvent = reinterpret_cast<PFN_vkCmdResetEvent>(vkGetDeviceProcAddr("vkCmdResetEvent"));
    m_vkCmdResetEvent2 = reinterpret_cast<PFN_vkCmdResetEvent2>(vkGetDeviceProcAddr("vkCmdResetEvent2"));
    m_vkCmdResetQueryPool = reinterpret_cast<PFN_vkCmdResetQueryPool>(vkGetDeviceProcAddr("vkCmdResetQueryPool"));
    m_vkCmdResolveImage = reinterpret_cast<PFN_vkCmdResolveImage>(vkGetDeviceProcAddr("vkCmdResolveImage"));
    m_vkCmdResolveImage2 = reinterpret_cast<PFN_vkCmdResolveImage2>(vkGetDeviceProcAddr("vkCmdResolveImage2"));
    m_vkCmdSetBlendConstants = reinterpret_cast<PFN_vkCmdSetBlendConstants>(vkGetDeviceProcAddr("vkCmdSetBlendConstants"));
    m_vkCmdSetCullMode = reinterpret_cast<PFN_vkCmdSetCullMode>(vkGetDeviceProcAddr("vkCmdSetCullMode"));
    m_vkCmdSetDepthBias = reinterpret_cast<PFN_vkCmdSetDepthBias>(vkGetDeviceProcAddr("vkCmdSetDepthBias"));
    m_vkCmdSetDepthBiasEnable = reinterpret_cast<PFN_vkCmdSetDepthBiasEnable>(vkGetDeviceProcAddr("vkCmdSetDepthBiasEnable"));
    m_vkCmdSetDepthBounds = reinterpret_cast<PFN_vkCmdSetDepthBounds>(vkGetDeviceProcAddr("vkCmdSetDepthBounds"));
    m_vkCmdSetDepthBoundsTestEnable = reinterpret_cast<PFN_vkCmdSetDepthBoundsTestEnable>(vkGetDeviceProcAddr("vkCmdSetDepthBoundsTestEnable"));
    m_vkCmdSetDepthCompareOp = reinterpret_cast<PFN_vkCmdSetDepthCompareOp>(vkGetDeviceProcAddr("vkCmdSetDepthCompareOp"));
    m_vkCmdSetDepthTestEnable = reinterpret_cast<PFN_vkCmdSetDepthTestEnable>(vkGetDeviceProcAddr("vkCmdSetDepthTestEnable"));
    m_vkCmdSetDepthWriteEnable = reinterpret_cast<PFN_vkCmdSetDepthWriteEnable>(vkGetDeviceProcAddr("vkCmdSetDepthWriteEnable"));
    m_vkCmdSetDescriptorBufferOffsetsEXT = reinterpret_cast<PFN_vkCmdSetDescriptorBufferOffsetsEXT>(vkGetDeviceProcAddr("vkCmdSetDescriptorBufferOffsetsEXT"));
    m_vkCmdSetDeviceMask = reinterpret_cast<PFN_vkCmdSetDeviceMask>(vkGetDeviceProcAddr("vkCmdSetDeviceMask"));
    m_vkCmdSetEvent = reinterpret_cast<PFN_vkCmdSetEvent>(vkGetDeviceProcAddr("vkCmdSetEvent"));
    m_vkCmdSetEvent2 = reinterpret_cast<PFN_vkCmdSetEvent2>(vkGetDeviceProcAddr("vkCmdSetEvent2"));
    m_vkCmdSetFrontFace = reinterpret_cast<PFN_vkCmdSetFrontFace>(vkGetDeviceProcAddr("vkCmdSetFrontFace"));
    m_vkCmdSetLineWidth = reinterpret_cast<PFN_vkCmdSetLineWidth>(vkGetDeviceProcAddr("vkCmdSetLineWidth"));
    m_vkCmdSetPrimitiveRestartEnable = reinterpret_cast<PFN_vkCmdSetPrimitiveRestartEnable>(vkGetDeviceProcAddr("vkCmdSetPrimitiveRestartEnable"));
    m_vkCmdSetPrimitiveTopology = reinterpret_cast<PFN_vkCmdSetPrimitiveTopology>(vkGetDeviceProcAddr("vkCmdSetPrimitiveTopology"));
    m_vkCmdSetRasterizerDiscardEnable = reinterpret_cast<PFN_vkCmdSetRasterizerDiscardEnable>(vkGetDeviceProcAddr("vkCmdSetRasterizerDiscardEnable"));
    m_vkCmdSetScissor = reinterpret_cast<PFN_vkCmdSetScissor>(vkGetDeviceProcAddr("vkCmdSetScissor"));
    m_vkCmdSetScissorWithCount = reinterpret_cast<PFN_vkCmdSetScissorWithCount>(vkGetDeviceProcAddr("vkCmdSetScissorWithCount"));
    m_vkCmdSetStencilCompareMask = reinterpret_cast<PFN_vkCmdSetStencilCompareMask>(vkGetDeviceProcAddr("vkCmdSetStencilCompareMask"));
    m_vkCmdSetStencilOp = reinterpret_cast<PFN_vkCmdSetStencilOp>(vkGetDeviceProcAddr("vkCmdSetStencilOp"));
    m_vkCmdSetStencilReference = reinterpret_cast<PFN_vkCmdSetStencilReference>(vkGetDeviceProcAddr("vkCmdSetStencilReference"));
    m_vkCmdSetStencilTestEnable = reinterpret_cast<PFN_vkCmdSetStencilTestEnable>(vkGetDeviceProcAddr("vkCmdSetStencilTestEnable"));
    m_vkCmdSetStencilWriteMask = reinterpret_cast<PFN_vkCmdSetStencilWriteMask>(vkGetDeviceProcAddr("vkCmdSetStencilWriteMask"));
    m_vkCmdSetViewport = reinterpret_cast<PFN_vkCmdSetViewport>(vkGetDeviceProcAddr("vkCmdSetViewport"));
    m_vkCmdSetViewportWithCount = reinterpret_cast<PFN_vkCmdSetViewportWithCount>(vkGetDeviceProcAddr("vkCmdSetViewportWithCount"));
    m_vkCmdUpdateBuffer = reinterpret_cast<PFN_vkCmdUpdateBuffer>(vkGetDeviceProcAddr("vkCmdUpdateBuffer"));
    m_vkCmdWaitEvents = reinterpret_cast<PFN_vkCmdWaitEvents>(vkGetDeviceProcAddr("vkCmdWaitEvents"));
    m_vkCmdWaitEvents2 = reinterpret_cast<PFN_vkCmdWaitEvents2>(vkGetDeviceProcAddr("vkCmdWaitEvents2"));
    m_vkCmdWriteTimestamp = reinterpret_cast<PFN_vkCmdWriteTimestamp>(vkGetDeviceProcAddr("vkCmdWriteTimestamp"));
    m_vkCmdWriteTimestamp2 = reinterpret_cast<PFN_vkCmdWriteTimestamp2>(vkGetDeviceProcAddr("vkCmdWriteTimestamp2"));
    m_vkCreateBuffer = reinterpret_cast<PFN_vkCreateBuffer>(vkGetDeviceProcAddr("vkCreateBuffer"));
    m_vkCreateBufferView = reinterpret_cast<PFN_vkCreateBufferView>(vkGetDeviceProcAddr("vkCreateBufferView"));
    m_vkCreateCommandPool = reinterpret_cast<PFN_vkCreateCommandPool>(vkGetDeviceProcAddr("vkCreateCommandPool"));
    m_vkCreateComputePipelines = reinterpret_cast<PFN_vkCreateComputePipelines>(vkGetDeviceProcAddr("vkCreateComputePipelines"));
    m_vkCreateDescriptorPool = reinterpret_cast<PFN_vkCreateDescriptorPool>(vkGetDeviceProcAddr("vkCreateDescriptorPool"));
    m_vkCreateDescriptorSetLayout = reinterpret_cast<PFN_vkCreateDescriptorSetLayout>(vkGetDeviceProcAddr("vkCreateDescriptorSetLayout"));
    m_vkCreateDescriptorUpdateTemplate = reinterpret_cast<PFN_vkCreateDescriptorUpdateTemplate>(vkGetDeviceProcAddr("vkCreateDescriptorUpdateTemplate"));
    m_vkCreateEvent = reinterpret_cast<PFN_vkCreateEvent>(vkGetDeviceProcAddr("vkCreateEvent"));
    m_vkCreateFence = reinterpret_cast<PFN_vkCreateFence>(vkGetDeviceProcAddr("vkCreateFence"));
    m_vkCreateFramebuffer = reinterpret_cast<PFN_vkCreateFramebuffer>(vkGetDeviceProcAddr("vkCreateFramebuffer"));
    m_vkCreateGraphicsPipelines = reinterpret_cast<PFN_vkCreateGraphicsPipelines>(vkGetDeviceProcAddr("vkCreateGraphicsPipelines"));
    m_vkCreateImage = reinterpret_cast<PFN_vkCreateImage>(vkGetDeviceProcAddr("vkCreateImage"));
    m_vkCreateImageView = reinterpret_cast<PFN_vkCreateImageView>(vkGetDeviceProcAddr("vkCreateImageView"));
    m_vkCreatePipelineCache = reinterpret_cast<PFN_vkCreatePipelineCache>(vkGetDeviceProcAddr("vkCreatePipelineCache"));
    m_vkCreatePipelineLayout = reinterpret_cast<PFN_vkCreatePipelineLayout>(vkGetDeviceProcAddr("vkCreatePipelineLayout"));
    m_vkCreatePrivateDataSlot = reinterpret_cast<PFN_vkCreatePrivateDataSlot>(vkGetDeviceProcAddr("vkCreatePrivateDataSlot"));
    m_vkCreateQueryPool = reinterpret_cast<PFN_vkCreateQueryPool>(vkGetDeviceProcAddr("vkCreateQueryPool"));
    m_vkCreateRenderPass = reinterpret_cast<PFN_vkCreateRenderPass>(vkGetDeviceProcAddr("vkCreateRenderPass"));
    m_vkCreateRenderPass2 = reinterpret_cast<PFN_vkCreateRenderPass2>(vkGetDeviceProcAddr("vkCreateRenderPass2"));
    m_vkCreateSampler = reinterpret_cast<PFN_vkCreateSampler>(vkGetDeviceProcAddr("vkCreateSampler"));
    m_vkCreateSamplerYcbcrConversion = reinterpret_cast<PFN_vkCreateSamplerYcbcrConversion>(vkGetDeviceProcAddr("vkCreateSamplerYcbcrConversion"));
    m_vkCreateSemaphore = reinterpret_cast<PFN_vkCreateSemaphore>(vkGetDeviceProcAddr("vkCreateSemaphore"));
    m_vkCreateShaderModule = reinterpret_cast<PFN_vkCreateShaderModule>(vkGetDeviceProcAddr("vkCreateShaderModule"));
    m_vkCreateSwapchainKHR = reinterpret_cast<PFN_vkCreateSwapchainKHR>(vkGetDeviceProcAddr("vkCreateSwapchainKHR"));
    m_vkDestroyBuffer = reinterpret_cast<PFN_vkDestroyBuffer>(vkGetDeviceProcAddr("vkDestroyBuffer"));
    m_vkDestroyBufferView = reinterpret_cast<PFN_vkDestroyBufferView>(vkGetDeviceProcAddr("vkDestroyBufferView"));
    m_vkDestroyCommandPool = reinterpret_cast<PFN_vkDestroyCommandPool>(vkGetDeviceProcAddr("vkDestroyCommandPool"));
    m_vkDestroyDescriptorPool = reinterpret_cast<PFN_vkDestroyDescriptorPool>(vkGetDeviceProcAddr("vkDestroyDescriptorPool"));
    m_vkDestroyDescriptorSetLayout = reinterpret_cast<PFN_vkDestroyDescriptorSetLayout>(vkGetDeviceProcAddr("vkDestroyDescriptorSetLayout"));
    m_vkDestroyDescriptorUpdateTemplate = reinterpret_cast<PFN_vkDestroyDescriptorUpdateTemplate>(vkGetDeviceProcAddr("vkDestroyDescriptorUpdateTemplate"));
    m_vkDestroyDevice = reinterpret_cast<PFN_vkDestroyDevice>(vkGetDeviceProcAddr("vkDestroyDevice"));
    m_vkDestroyEvent = reinterpret_cast<PFN_vkDestroyEvent>(vkGetDeviceProcAddr("vkDestroyEvent"));
    m_vkDestroyFence = reinterpret_cast<PFN_vkDestroyFence>(vkGetDeviceProcAddr("vkDestroyFence"));
    m_vkDestroyFramebuffer = reinterpret_cast<PFN_vkDestroyFramebuffer>(vkGetDeviceProcAddr("vkDestroyFramebuffer"));
    m_vkDestroyImage = reinterpret_cast<PFN_vkDestroyImage>(vkGetDeviceProcAddr("vkDestroyImage"));
    m_vkDestroyImageView = reinterpret_cast<PFN_vkDestroyImageView>(vkGetDeviceProcAddr("vkDestroyImageView"));
    m_vkDestroyPipeline = reinterpret_cast<PFN_vkDestroyPipeline>(vkGetDeviceProcAddr("vkDestroyPipeline"));
    m_vkDestroyPipelineCache = reinterpret_cast<PFN_vkDestroyPipelineCache>(vkGetDeviceProcAddr("vkDestroyPipelineCache"));
    m_vkDestroyPipelineLayout = reinterpret_cast<PFN_vkDestroyPipelineLayout>(vkGetDeviceProcAddr("vkDestroyPipelineLayout"));
    m_vkDestroyPrivateDataSlot = reinterpret_cast<PFN_vkDestroyPrivateDataSlot>(vkGetDeviceProcAddr("vkDestroyPrivateDataSlot"));
    m_vkDestroyQueryPool = reinterpret_cast<PFN_vkDestroyQueryPool>(vkGetDeviceProcAddr("vkDestroyQueryPool"));
    m_vkDestroyRenderPass = reinterpret_cast<PFN_vkDestroyRenderPass>(vkGetDeviceProcAddr("vkDestroyRenderPass"));
    m_vkDestroySampler = reinterpret_cast<PFN_vkDestroySampler>(vkGetDeviceProcAddr("vkDestroySampler"));
    m_vkDestroySamplerYcbcrConversion = reinterpret_cast<PFN_vkDestroySamplerYcbcrConversion>(vkGetDeviceProcAddr("vkDestroySamplerYcbcrConversion"));
    m_vkDestroySemaphore = reinterpret_cast<PFN_vkDestroySemaphore>(vkGetDeviceProcAddr("vkDestroySemaphore"));
    m_vkDestroyShaderModule = reinterpret_cast<PFN_vkDestroyShaderModule>(vkGetDeviceProcAddr("vkDestroyShaderModule"));
    m_vkDestroySwapchainKHR = reinterpret_cast<PFN_vkDestroySwapchainKHR>(vkGetDeviceProcAddr("vkDestroySwapchainKHR"));
    m_vkDeviceWaitIdle = reinterpret_cast<PFN_vkDeviceWaitIdle>(vkGetDeviceProcAddr("vkDeviceWaitIdle"));
    m_vkEndCommandBuffer = reinterpret_cast<PFN_vkEndCommandBuffer>(vkGetDeviceProcAddr("vkEndCommandBuffer"));
    m_vkFlushMappedMemoryRanges = reinterpret_cast<PFN_vkFlushMappedMemoryRanges>(vkGetDeviceProcAddr("vkFlushMappedMemoryRanges"));
    m_vkFreeCommandBuffers = reinterpret_cast<PFN_vkFreeCommandBuffers>(vkGetDeviceProcAddr("vkFreeCommandBuffers"));
    m_vkFreeDescriptorSets = reinterpret_cast<PFN_vkFreeDescriptorSets>(vkGetDeviceProcAddr("vkFreeDescriptorSets"));
    m_vkFreeMemory = reinterpret_cast<PFN_vkFreeMemory>(vkGetDeviceProcAddr("vkFreeMemory"));
    m_vkGetBufferDeviceAddress = reinterpret_cast<PFN_vkGetBufferDeviceAddress>(vkGetDeviceProcAddr("vkGetBufferDeviceAddress"));
    m_vkGetBufferMemoryRequirements = reinterpret_cast<PFN_vkGetBufferMemoryRequirements>(vkGetDeviceProcAddr("vkGetBufferMemoryRequirements"));
    m_vkGetBufferMemoryRequirements2 = reinterpret_cast<PFN_vkGetBufferMemoryRequirements2>(vkGetDeviceProcAddr("vkGetBufferMemoryRequirements2"));
    m_vkGetBufferOpaqueCaptureAddress = reinterpret_cast<PFN_vkGetBufferOpaqueCaptureAddress>(vkGetDeviceProcAddr("vkGetBufferOpaqueCaptureAddress"));
    m_vkGetBufferOpaqueCaptureDescriptorDataEXT = reinterpret_cast<PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT>(vkGetDeviceProcAddr("vkGetBufferOpaqueCaptureDescriptorDataEXT"));
    m_vkGetDescriptorEXT = reinterpret_cast<PFN_vkGetDescriptorEXT>(vkGetDeviceProcAddr("vkGetDescriptorEXT"));
    m_vkGetDescriptorSetLayoutBindingOffsetEXT = reinterpret_cast<PFN_vkGetDescriptorSetLayoutBindingOffsetEXT>(vkGetDeviceProcAddr("vkGetDescriptorSetLayoutBindingOffsetEXT"));
    m_vkGetDescriptorSetLayoutSizeEXT = reinterpret_cast<PFN_vkGetDescriptorSetLayoutSizeEXT>(vkGetDeviceProcAddr("vkGetDescriptorSetLayoutSizeEXT"));
    m_vkGetDescriptorSetLayoutSupport = reinterpret_cast<PFN_vkGetDescriptorSetLayoutSupport>(vkGetDeviceProcAddr("vkGetDescriptorSetLayoutSupport"));
    m_vkGetDeviceBufferMemoryRequirements = reinterpret_cast<PFN_vkGetDeviceBufferMemoryRequirements>(vkGetDeviceProcAddr("vkGetDeviceBufferMemoryRequirements"));
    m_vkGetDeviceGroupPeerMemoryFeatures = reinterpret_cast<PFN_vkGetDeviceGroupPeerMemoryFeatures>(vkGetDeviceProcAddr("vkGetDeviceGroupPeerMemoryFeatures"));
    m_vkGetDeviceGroupPresentCapabilitiesKHR = reinterpret_cast<PFN_vkGetDeviceGroupPresentCapabilitiesKHR>(vkGetDeviceProcAddr("vkGetDeviceGroupPresentCapabilitiesKHR"));
    m_vkGetDeviceGroupSurfacePresentModesKHR = reinterpret_cast<PFN_vkGetDeviceGroupSurfacePresentModesKHR>(vkGetDeviceProcAddr("vkGetDeviceGroupSurfacePresentModesKHR"));
    m_vkGetDeviceImageMemoryRequirements = reinterpret_cast<PFN_vkGetDeviceImageMemoryRequirements>(vkGetDeviceProcAddr("vkGetDeviceImageMemoryRequirements"));
    m_vkGetDeviceImageSparseMemoryRequirements = reinterpret_cast<PFN_vkGetDeviceImageSparseMemoryRequirements>(vkGetDeviceProcAddr("vkGetDeviceImageSparseMemoryRequirements"));
    m_vkGetDeviceMemoryCommitment = reinterpret_cast<PFN_vkGetDeviceMemoryCommitment>(vkGetDeviceProcAddr("vkGetDeviceMemoryCommitment"));
    m_vkGetDeviceMemoryOpaqueCaptureAddress = reinterpret_cast<PFN_vkGetDeviceMemoryOpaqueCaptureAddress>(vkGetDeviceProcAddr("vkGetDeviceMemoryOpaqueCaptureAddress"));
    m_vkGetDeviceQueue = reinterpret_cast<PFN_vkGetDeviceQueue>(vkGetDeviceProcAddr("vkGetDeviceQueue"));
    m_vkGetDeviceQueue2 = reinterpret_cast<PFN_vkGetDeviceQueue2>(vkGetDeviceProcAddr("vkGetDeviceQueue2"));
    m_vkGetEventStatus = reinterpret_cast<PFN_vkGetEventStatus>(vkGetDeviceProcAddr("vkGetEventStatus"));
    m_vkGetFenceFdKHR = reinterpret_cast<PFN_vkGetFenceFdKHR>(vkGetDeviceProcAddr("vkGetFenceFdKHR"));
    m_vkGetFenceStatus = reinterpret_cast<PFN_vkGetFenceStatus>(vkGetDeviceProcAddr("vkGetFenceStatus"));
    m_vkGetImageMemoryRequirements = reinterpret_cast<PFN_vkGetImageMemoryRequirements>(vkGetDeviceProcAddr("vkGetImageMemoryRequirements"));
    m_vkGetImageMemoryRequirements2 = reinterpret_cast<PFN_vkGetImageMemoryRequirements2>(vkGetDeviceProcAddr("vkGetImageMemoryRequirements2"));
    m_vkGetImageOpaqueCaptureDescriptorDataEXT = reinterpret_cast<PFN_vkGetImageOpaqueCaptureDescriptorDataEXT>(vkGetDeviceProcAddr("vkGetImageOpaqueCaptureDescriptorDataEXT"));
    m_vkGetImageSparseMemoryRequirements = reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements>(vkGetDeviceProcAddr("vkGetImageSparseMemoryRequirements"));
    m_vkGetImageSparseMemoryRequirements2 = reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements2>(vkGetDeviceProcAddr("vkGetImageSparseMemoryRequirements2"));
    m_vkGetImageSubresourceLayout = reinterpret_cast<PFN_vkGetImageSubresourceLayout>(vkGetDeviceProcAddr("vkGetImageSubresourceLayout"));
    m_vkGetImageViewOpaqueCaptureDescriptorDataEXT = reinterpret_cast<PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT>(vkGetDeviceProcAddr("vkGetImageViewOpaqueCaptureDescriptorDataEXT"));
    m_vkGetPipelineCacheData = reinterpret_cast<PFN_vkGetPipelineCacheData>(vkGetDeviceProcAddr("vkGetPipelineCacheData"));
    m_vkGetPrivateData = reinterpret_cast<PFN_vkGetPrivateData>(vkGetDeviceProcAddr("vkGetPrivateData"));
    m_vkGetQueryPoolResults = reinterpret_cast<PFN_vkGetQueryPoolResults>(vkGetDeviceProcAddr("vkGetQueryPoolResults"));
    m_vkGetRenderAreaGranularity = reinterpret_cast<PFN_vkGetRenderAreaGranularity>(vkGetDeviceProcAddr("vkGetRenderAreaGranularity"));
    m_vkGetSamplerOpaqueCaptureDescriptorDataEXT = reinterpret_cast<PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT>(vkGetDeviceProcAddr("vkGetSamplerOpaqueCaptureDescriptorDataEXT"));
    m_vkGetSemaphoreCounterValue = reinterpret_cast<PFN_vkGetSemaphoreCounterValue>(vkGetDeviceProcAddr("vkGetSemaphoreCounterValue"));
    m_vkGetSwapchainImagesKHR = reinterpret_cast<PFN_vkGetSwapchainImagesKHR>(vkGetDeviceProcAddr("vkGetSwapchainImagesKHR"));
    m_vkImportFenceFdKHR = reinterpret_cast<PFN_vkImportFenceFdKHR>(vkGetDeviceProcAddr("vkImportFenceFdKHR"));
    m_vkInvalidateMappedMemoryRanges = reinterpret_cast<PFN_vkInvalidateMappedMemoryRanges>(vkGetDeviceProcAddr("vkInvalidateMappedMemoryRanges"));
    m_vkMapMemory = reinterpret_cast<PFN_vkMapMemory>(vkGetDeviceProcAddr("vkMapMemory"));
    m_vkMergePipelineCaches = reinterpret_cast<PFN_vkMergePipelineCaches>(vkGetDeviceProcAddr("vkMergePipelineCaches"));
    m_vkQueueBeginDebugUtilsLabelEXT = reinterpret_cast<PFN_vkQueueBeginDebugUtilsLabelEXT>(vkGetDeviceProcAddr("vkQueueBeginDebugUtilsLabelEXT"));
    m_vkQueueBindSparse = reinterpret_cast<PFN_vkQueueBindSparse>(vkGetDeviceProcAddr("vkQueueBindSparse"));
    m_vkQueueEndDebugUtilsLabelEXT = reinterpret_cast<PFN_vkQueueEndDebugUtilsLabelEXT>(vkGetDeviceProcAddr("vkQueueEndDebugUtilsLabelEXT"));
    m_vkQueueInsertDebugUtilsLabelEXT = reinterpret_cast<PFN_vkQueueInsertDebugUtilsLabelEXT>(vkGetDeviceProcAddr("vkQueueInsertDebugUtilsLabelEXT"));
    m_vkQueuePresentKHR = reinterpret_cast<PFN_vkQueuePresentKHR>(vkGetDeviceProcAddr("vkQueuePresentKHR"));
    m_vkQueueSubmit = reinterpret_cast<PFN_vkQueueSubmit>(vkGetDeviceProcAddr("vkQueueSubmit"));
    m_vkQueueSubmit2 = reinterpret_cast<PFN_vkQueueSubmit2>(vkGetDeviceProcAddr("vkQueueSubmit2"));
    m_vkQueueWaitIdle = reinterpret_cast<PFN_vkQueueWaitIdle>(vkGetDeviceProcAddr("vkQueueWaitIdle"));
    m_vkResetCommandBuffer = reinterpret_cast<PFN_vkResetCommandBuffer>(vkGetDeviceProcAddr("vkResetCommandBuffer"));
    m_vkResetCommandPool = reinterpret_cast<PFN_vkResetCommandPool>(vkGetDeviceProcAddr("vkResetCommandPool"));
    m_vkResetDescriptorPool = reinterpret_cast<PFN_vkResetDescriptorPool>(vkGetDeviceProcAddr("vkResetDescriptorPool"));
    m_vkResetEvent = reinterpret_cast<PFN_vkResetEvent>(vkGetDeviceProcAddr("vkResetEvent"));
    m_vkResetFences = reinterpret_cast<PFN_vkResetFences>(vkGetDeviceProcAddr("vkResetFences"));
    m_vkResetQueryPool = reinterpret_cast<PFN_vkResetQueryPool>(vkGetDeviceProcAddr("vkResetQueryPool"));
    m_vkSetDebugUtilsObjectNameEXT = reinterpret_cast<PFN_vkSetDebugUtilsObjectNameEXT>(vkGetDeviceProcAddr("vkSetDebugUtilsObjectNameEXT"));
    m_vkSetDebugUtilsObjectTagEXT = reinterpret_cast<PFN_vkSetDebugUtilsObjectTagEXT>(vkGetDeviceProcAddr("vkSetDebugUtilsObjectTagEXT"));
    m_vkSetEvent = reinterpret_cast<PFN_vkSetEvent>(vkGetDeviceProcAddr("vkSetEvent"));
    m_vkSetPrivateData = reinterpret_cast<PFN_vkSetPrivateData>(vkGetDeviceProcAddr("vkSetPrivateData"));
    m_vkSignalSemaphore = reinterpret_cast<PFN_vkSignalSemaphore>(vkGetDeviceProcAddr("vkSignalSemaphore"));
    m_vkTrimCommandPool = reinterpret_cast<PFN_vkTrimCommandPool>(vkGetDeviceProcAddr("vkTrimCommandPool"));
    m_vkUnmapMemory = reinterpret_cast<PFN_vkUnmapMemory>(vkGetDeviceProcAddr("vkUnmapMemory"));
    m_vkUpdateDescriptorSetWithTemplate = reinterpret_cast<PFN_vkUpdateDescriptorSetWithTemplate>(vkGetDeviceProcAddr("vkUpdateDescriptorSetWithTemplate"));
    m_vkUpdateDescriptorSets = reinterpret_cast<PFN_vkUpdateDescriptorSets>(vkGetDeviceProcAddr("vkUpdateDescriptorSets"));
    m_vkWaitForFences = reinterpret_cast<PFN_vkWaitForFences>(vkGetDeviceProcAddr("vkWaitForFences"));
    m_vkWaitSemaphores = reinterpret_cast<PFN_vkWaitSemaphores>(vkGetDeviceProcAddr("vkWaitSemaphores"));
}

Result ContextTable::vkAcquireNextImage2KHR(const AcquireNextImageInfoKHR *pAcquireInfo, uint32_t *pImageIndex) const {
    return m_vkAcquireNextImage2KHR(m_device, pAcquireInfo, pImageIndex);
}

Result ContextTable::vkAcquireNextImageKHR(SwapchainKHR swapchain, uint64_t timeout, Semaphore semaphore, Fence fence, uint32_t *pImageIndex) const {
    return m_vkAcquireNextImageKHR(m_device, swapchain, timeout, semaphore, fence, pImageIndex);
}

Result ContextTable::vkAllocateCommandBuffers(const CommandBufferAllocateInfo *pAllocateInfo, CommandBuffer *pCommandBuffers) const {
    return m_vkAllocateCommandBuffers(m_device, pAllocateInfo, pCommandBuffers);
}

Result ContextTable::vkAllocateDescriptorSets(const DescriptorSetAllocateInfo *pAllocateInfo, DescriptorSet *pDescriptorSets) const {
    return m_vkAllocateDescriptorSets(m_device, pAllocateInfo, pDescriptorSets);
}

Result ContextTable::vkAllocateMemory(const MemoryAllocateInfo *pAllocateInfo, DeviceMemory *pMemory) const {
    return m_vkAllocateMemory(m_device, pAllocateInfo, nullptr, pMemory);
}

Result ContextTable::vkBeginCommandBuffer(CommandBuffer commandBuffer, const CommandBufferBeginInfo *pBeginInfo) const {
    return m_vkBeginCommandBuffer(commandBuffer, pBeginInfo);
}

Result ContextTable::vkBindBufferMemory(Buffer buffer, DeviceMemory memory, DeviceSize memoryOffset) const {
    return m_vkBindBufferMemory(m_device, buffer, memory, memoryOffset);
}

Result ContextTable::vkBindBufferMemory2(uint32_t bindInfoCount, const BindBufferMemoryInfo *pBindInfos) const {
    return m_vkBindBufferMemory2(m_device, bindInfoCount, pBindInfos);
}

Result ContextTable::vkBindImageMemory(Image image, DeviceMemory memory, DeviceSize memoryOffset) const {
    return m_vkBindImageMemory(m_device, image, memory, memoryOffset);
}

Result ContextTable::vkBindImageMemory2(uint32_t bindInfoCount, const BindImageMemoryInfo *pBindInfos) const {
    return m_vkBindImageMemory2(m_device, bindInfoCount, pBindInfos);
}

void ContextTable::vkCmdBeginDebugUtilsLabelEXT(CommandBuffer commandBuffer, const DebugUtilsLabelEXT *pLabelInfo) const {
    return m_vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

void ContextTable::vkCmdBeginQuery(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t query, QueryControlFlags flags) const {
    return m_vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
}

void ContextTable::vkCmdBeginRenderPass(CommandBuffer commandBuffer, const RenderPassBeginInfo *pRenderPassBegin, SubpassContents contents) const {
    return m_vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}

void ContextTable::vkCmdBeginRenderPass2(CommandBuffer commandBuffer, const RenderPassBeginInfo *pRenderPassBegin, const SubpassBeginInfo *pSubpassBeginInfo) const {
    return m_vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}

void ContextTable::vkCmdBeginRendering(CommandBuffer commandBuffer, const RenderingInfo *pRenderingInfo) const {
    return m_vkCmdBeginRendering(commandBuffer, pRenderingInfo);
}

void ContextTable::vkCmdBindDescriptorBufferEmbeddedSamplersEXT(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint32_t set) const {
    return m_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer, pipelineBindPoint, layout, set);
}

void ContextTable::vkCmdBindDescriptorBuffersEXT(CommandBuffer commandBuffer, uint32_t bufferCount, const DescriptorBufferBindingInfoEXT *pBindingInfos) const {
    return m_vkCmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);
}

void ContextTable::vkCmdBindDescriptorSets(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const DescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets) const {
    return m_vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}

void ContextTable::vkCmdBindIndexBuffer(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, IndexType indexType) const {
    return m_vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}

void ContextTable::vkCmdBindPipeline(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline) const {
    return m_vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}

void ContextTable::vkCmdBindVertexBuffers(CommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const Buffer *pBuffers, const DeviceSize *pOffsets) const {
    return m_vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}

void ContextTable::vkCmdBindVertexBuffers2(CommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const Buffer *pBuffers, const DeviceSize *pOffsets, const DeviceSize *pSizes, const DeviceSize *pStrides) const {
    return m_vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
}

void ContextTable::vkCmdBlitImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const ImageBlit *pRegions, Filter filter) const {
    return m_vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}

void ContextTable::vkCmdBlitImage2(CommandBuffer commandBuffer, const BlitImageInfo2 *pBlitImageInfo) const {
    return m_vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
}

void ContextTable::vkCmdClearAttachments(CommandBuffer commandBuffer, uint32_t attachmentCount, const ClearAttachment *pAttachments, uint32_t rectCount, const ClearRect *pRects) const {
    return m_vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}

void ContextTable::vkCmdClearColorImage(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, const ClearColorValue *pColor, uint32_t rangeCount, const ImageSubresourceRange *pRanges) const {
    return m_vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}

void ContextTable::vkCmdClearDepthStencilImage(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, const ClearDepthStencilValue *pDepthStencil, uint32_t rangeCount, const ImageSubresourceRange *pRanges) const {
    return m_vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}

void ContextTable::vkCmdCopyBuffer(CommandBuffer commandBuffer, Buffer srcBuffer, Buffer dstBuffer, uint32_t regionCount, const BufferCopy *pRegions) const {
    return m_vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}

void ContextTable::vkCmdCopyBuffer2(CommandBuffer commandBuffer, const CopyBufferInfo2 *pCopyBufferInfo) const {
    return m_vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
}

void ContextTable::vkCmdCopyBufferToImage(CommandBuffer commandBuffer, Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const BufferImageCopy *pRegions) const {
    return m_vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}

void ContextTable::vkCmdCopyBufferToImage2(CommandBuffer commandBuffer, const CopyBufferToImageInfo2 *pCopyBufferToImageInfo) const {
    return m_vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
}

void ContextTable::vkCmdCopyImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const ImageCopy *pRegions) const {
    return m_vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

void ContextTable::vkCmdCopyImage2(CommandBuffer commandBuffer, const CopyImageInfo2 *pCopyImageInfo) const {
    return m_vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
}

void ContextTable::vkCmdCopyImageToBuffer(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, uint32_t regionCount, const BufferImageCopy *pRegions) const {
    return m_vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}

void ContextTable::vkCmdCopyImageToBuffer2(CommandBuffer commandBuffer, const CopyImageToBufferInfo2 *pCopyImageToBufferInfo) const {
    return m_vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
}

void ContextTable::vkCmdCopyQueryPoolResults(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags) const {
    return m_vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}

void ContextTable::vkCmdDispatch(CommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const {
    return m_vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}

void ContextTable::vkCmdDispatchBase(CommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const {
    return m_vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}

void ContextTable::vkCmdDispatchIndirect(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset) const {
    return m_vkCmdDispatchIndirect(commandBuffer, buffer, offset);
}

void ContextTable::vkCmdDraw(CommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) const {
    return m_vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}

void ContextTable::vkCmdDrawIndexed(CommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) const {
    return m_vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}

void ContextTable::vkCmdDrawIndexedIndirect(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint32_t drawCount, uint32_t stride) const {
    return m_vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

void ContextTable::vkCmdDrawIndexedIndirectCount(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
    return m_vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}

void ContextTable::vkCmdDrawIndirect(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint32_t drawCount, uint32_t stride) const {
    return m_vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}

void ContextTable::vkCmdDrawIndirectCount(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
    return m_vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}

void ContextTable::vkCmdEndDebugUtilsLabelEXT(CommandBuffer commandBuffer) const {
    return m_vkCmdEndDebugUtilsLabelEXT(commandBuffer);
}

void ContextTable::vkCmdEndQuery(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t query) const {
    return m_vkCmdEndQuery(commandBuffer, queryPool, query);
}

void ContextTable::vkCmdEndRenderPass(CommandBuffer commandBuffer) const {
    return m_vkCmdEndRenderPass(commandBuffer);
}

void ContextTable::vkCmdEndRenderPass2(CommandBuffer commandBuffer, const SubpassEndInfo *pSubpassEndInfo) const {
    return m_vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
}

void ContextTable::vkCmdEndRendering(CommandBuffer commandBuffer) const {
    return m_vkCmdEndRendering(commandBuffer);
}

void ContextTable::vkCmdExecuteCommands(CommandBuffer commandBuffer, uint32_t commandBufferCount, const CommandBuffer *pCommandBuffers) const {
    return m_vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
}

void ContextTable::vkCmdFillBuffer(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize size, uint32_t data) const {
    return m_vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}

void ContextTable::vkCmdInsertDebugUtilsLabelEXT(CommandBuffer commandBuffer, const DebugUtilsLabelEXT *pLabelInfo) const {
    return m_vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}

void ContextTable::vkCmdNextSubpass(CommandBuffer commandBuffer, SubpassContents contents) const {
    return m_vkCmdNextSubpass(commandBuffer, contents);
}

void ContextTable::vkCmdNextSubpass2(CommandBuffer commandBuffer, const SubpassBeginInfo *pSubpassBeginInfo, const SubpassEndInfo *pSubpassEndInfo) const {
    return m_vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}

void ContextTable::vkCmdPipelineBarrier(CommandBuffer commandBuffer, PipelineStage srcStageMask, PipelineStage dstStageMask, DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const MemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const BufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const ImageMemoryBarrier *pImageMemoryBarriers) const {
    return m_vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

void ContextTable::vkCmdPipelineBarrier2(CommandBuffer commandBuffer, const DependencyInfo *pDependencyInfo) const {
    return m_vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
}

void ContextTable::vkCmdPushConstants(CommandBuffer commandBuffer, PipelineLayout layout, ShaderStage stageFlags, uint32_t offset, uint32_t size, const void *pValues) const {
    return m_vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
}

void ContextTable::vkCmdResetEvent(CommandBuffer commandBuffer, Event event, PipelineStage stageMask) const {
    return m_vkCmdResetEvent(commandBuffer, event, stageMask);
}

void ContextTable::vkCmdResetEvent2(CommandBuffer commandBuffer, Event event, PipelineStage2 stageMask) const {
    return m_vkCmdResetEvent2(commandBuffer, event, stageMask);
}

void ContextTable::vkCmdResetQueryPool(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const {
    return m_vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}

void ContextTable::vkCmdResolveImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const ImageResolve *pRegions) const {
    return m_vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}

void ContextTable::vkCmdResolveImage2(CommandBuffer commandBuffer, const ResolveImageInfo2 *pResolveImageInfo) const {
    return m_vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
}

void ContextTable::vkCmdSetBlendConstants(CommandBuffer commandBuffer, const float blendConstants [4]) const {
    return m_vkCmdSetBlendConstants(commandBuffer, blendConstants);
}

void ContextTable::vkCmdSetCullMode(CommandBuffer commandBuffer, CullMode cullMode) const {
    return m_vkCmdSetCullMode(commandBuffer, cullMode);
}

void ContextTable::vkCmdSetDepthBias(CommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) const {
    return m_vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}

void ContextTable::vkCmdSetDepthBiasEnable(CommandBuffer commandBuffer, Bool depthBiasEnable) const {
    return m_vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
}

void ContextTable::vkCmdSetDepthBounds(CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) const {
    return m_vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}

void ContextTable::vkCmdSetDepthBoundsTestEnable(CommandBuffer commandBuffer, Bool depthBoundsTestEnable) const {
    return m_vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
}

void ContextTable::vkCmdSetDepthCompareOp(CommandBuffer commandBuffer, CompareOp depthCompareOp) const {
    return m_vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
}

void ContextTable::vkCmdSetDepthTestEnable(CommandBuffer commandBuffer, Bool depthTestEnable) const {
    return m_vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
}

void ContextTable::vkCmdSetDepthWriteEnable(CommandBuffer commandBuffer, Bool depthWriteEnable) const {
    return m_vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
}

void ContextTable::vkCmdSetDescriptorBufferOffsetsEXT(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t *pBufferIndices, const DeviceSize *pOffsets) const {
    return m_vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
}

void ContextTable::vkCmdSetDeviceMask(CommandBuffer commandBuffer, uint32_t deviceMask) const {
    return m_vkCmdSetDeviceMask(commandBuffer, deviceMask);
}

void ContextTable::vkCmdSetEvent(CommandBuffer commandBuffer, Event event, PipelineStage stageMask) const {
    return m_vkCmdSetEvent(commandBuffer, event, stageMask);
}

void ContextTable::vkCmdSetEvent2(CommandBuffer commandBuffer, Event event, const DependencyInfo *pDependencyInfo) const {
    return m_vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
}

void ContextTable::vkCmdSetFrontFace(CommandBuffer commandBuffer, FrontFace frontFace) const {
    return m_vkCmdSetFrontFace(commandBuffer, frontFace);
}

void ContextTable::vkCmdSetLineWidth(CommandBuffer commandBuffer, float lineWidth) const {
    return m_vkCmdSetLineWidth(commandBuffer, lineWidth);
}

void ContextTable::vkCmdSetPrimitiveRestartEnable(CommandBuffer commandBuffer, Bool primitiveRestartEnable) const {
    return m_vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
}

void ContextTable::vkCmdSetPrimitiveTopology(CommandBuffer commandBuffer, PrimitiveTopology primitiveTopology) const {
    return m_vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
}

void ContextTable::vkCmdSetRasterizerDiscardEnable(CommandBuffer commandBuffer, Bool rasterizerDiscardEnable) const {
    return m_vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
}

void ContextTable::vkCmdSetScissor(CommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const Rect2D *pScissors) const {
    return m_vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
}

void ContextTable::vkCmdSetScissorWithCount(CommandBuffer commandBuffer, uint32_t scissorCount, const Rect2D *pScissors) const {
    return m_vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
}

void ContextTable::vkCmdSetStencilCompareMask(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint32_t compareMask) const {
    return m_vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}

void ContextTable::vkCmdSetStencilOp(CommandBuffer commandBuffer, StencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp) const {
    return m_vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}

void ContextTable::vkCmdSetStencilReference(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint32_t reference) const {
    return m_vkCmdSetStencilReference(commandBuffer, faceMask, reference);
}

void ContextTable::vkCmdSetStencilTestEnable(CommandBuffer commandBuffer, Bool stencilTestEnable) const {
    return m_vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
}

void ContextTable::vkCmdSetStencilWriteMask(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint32_t writeMask) const {
    return m_vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}

void ContextTable::vkCmdSetViewport(CommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const Viewport *pViewports) const {
    return m_vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
}

void ContextTable::vkCmdSetViewportWithCount(CommandBuffer commandBuffer, uint32_t viewportCount, const Viewport *pViewports) const {
    return m_vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
}

void ContextTable::vkCmdUpdateBuffer(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, const void *pData) const {
    return m_vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}

void ContextTable::vkCmdWaitEvents(CommandBuffer commandBuffer, uint32_t eventCount, const Event *pEvents, PipelineStage srcStageMask, PipelineStage dstStageMask, uint32_t memoryBarrierCount, const MemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const BufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const ImageMemoryBarrier *pImageMemoryBarriers) const {
    return m_vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}

void ContextTable::vkCmdWaitEvents2(CommandBuffer commandBuffer, uint32_t eventCount, const Event *pEvents, const DependencyInfo *pDependencyInfos) const {
    return m_vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
}

void ContextTable::vkCmdWriteTimestamp(CommandBuffer commandBuffer, PipelineStage pipelineStage, QueryPool queryPool, uint32_t query) const {
    return m_vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}

void ContextTable::vkCmdWriteTimestamp2(CommandBuffer commandBuffer, PipelineStage2 stage, QueryPool queryPool, uint32_t query) const {
    return m_vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
}

Result ContextTable::vkCreateBuffer(const BufferCreateInfo *pCreateInfo, Buffer *pBuffer) const {
    return m_vkCreateBuffer(m_device, pCreateInfo, nullptr, pBuffer);
}

Result ContextTable::vkCreateBufferView(const BufferViewCreateInfo *pCreateInfo, BufferView *pView) const {
    return m_vkCreateBufferView(m_device, pCreateInfo, nullptr, pView);
}

Result ContextTable::vkCreateCommandPool(const CommandPoolCreateInfo *pCreateInfo, CommandPool *pCommandPool) const {
    return m_vkCreateCommandPool(m_device, pCreateInfo, nullptr, pCommandPool);
}

Result ContextTable::vkCreateComputePipelines(PipelineCache pipelineCache, uint32_t createInfoCount, const ComputePipelineCreateInfo *pCreateInfos, Pipeline *pPipelines) const {
    return m_vkCreateComputePipelines(m_device, pipelineCache, createInfoCount, pCreateInfos, nullptr, pPipelines);
}

Result ContextTable::vkCreateDebugUtilsMessengerEXT(const DebugUtilsMessengerCreateInfoEXT *pCreateInfo, DebugUtilsMessengerEXT *pMessenger) const {
    return m_vkCreateDebugUtilsMessengerEXT(m_instance, pCreateInfo, nullptr, pMessenger);
}

Result ContextTable::vkCreateDescriptorPool(const DescriptorPoolCreateInfo *pCreateInfo, DescriptorPool *pDescriptorPool) const {
    return m_vkCreateDescriptorPool(m_device, pCreateInfo, nullptr, pDescriptorPool);
}

Result ContextTable::vkCreateDescriptorSetLayout(const DescriptorSetLayoutCreateInfo *pCreateInfo, DescriptorSetLayout *pSetLayout) const {
    return m_vkCreateDescriptorSetLayout(m_device, pCreateInfo, nullptr, pSetLayout);
}

Result ContextTable::vkCreateDescriptorUpdateTemplate(const DescriptorUpdateTemplateCreateInfo *pCreateInfo, DescriptorUpdateTemplate *pDescriptorUpdateTemplate) const {
    return m_vkCreateDescriptorUpdateTemplate(m_device, pCreateInfo, nullptr, pDescriptorUpdateTemplate);
}

Result ContextTable::vkCreateDevice(const DeviceCreateInfo *pCreateInfo, Device *pDevice) const {
    return m_vkCreateDevice(m_physical_device, pCreateInfo, nullptr, pDevice);
}

Result ContextTable::vkCreateEvent(const EventCreateInfo *pCreateInfo, Event *pEvent) const {
    return m_vkCreateEvent(m_device, pCreateInfo, nullptr, pEvent);
}

Result ContextTable::vkCreateFence(const FenceCreateInfo *pCreateInfo, Fence *pFence) const {
    return m_vkCreateFence(m_device, pCreateInfo, nullptr, pFence);
}

Result ContextTable::vkCreateFramebuffer(const FramebufferCreateInfo *pCreateInfo, Framebuffer *pFramebuffer) const {
    return m_vkCreateFramebuffer(m_device, pCreateInfo, nullptr, pFramebuffer);
}

Result ContextTable::vkCreateGraphicsPipelines(PipelineCache pipelineCache, uint32_t createInfoCount, const GraphicsPipelineCreateInfo *pCreateInfos, Pipeline *pPipelines) const {
    return m_vkCreateGraphicsPipelines(m_device, pipelineCache, createInfoCount, pCreateInfos, nullptr, pPipelines);
}

Result ContextTable::vkCreateImage(const ImageCreateInfo *pCreateInfo, Image *pImage) const {
    return m_vkCreateImage(m_device, pCreateInfo, nullptr, pImage);
}

Result ContextTable::vkCreateImageView(const ImageViewCreateInfo *pCreateInfo, ImageView *pView) const {
    return m_vkCreateImageView(m_device, pCreateInfo, nullptr, pView);
}

Result ContextTable::vkCreateInstance(const InstanceCreateInfo *pCreateInfo, Instance *pInstance) const {
    return m_vkCreateInstance(pCreateInfo, nullptr, pInstance);
}

Result ContextTable::vkCreatePipelineCache(const PipelineCacheCreateInfo *pCreateInfo, PipelineCache *pPipelineCache) const {
    return m_vkCreatePipelineCache(m_device, pCreateInfo, nullptr, pPipelineCache);
}

Result ContextTable::vkCreatePipelineLayout(const PipelineLayoutCreateInfo *pCreateInfo, PipelineLayout *pPipelineLayout) const {
    return m_vkCreatePipelineLayout(m_device, pCreateInfo, nullptr, pPipelineLayout);
}

Result ContextTable::vkCreatePrivateDataSlot(const PrivateDataSlotCreateInfo *pCreateInfo, PrivateDataSlot *pPrivateDataSlot) const {
    return m_vkCreatePrivateDataSlot(m_device, pCreateInfo, nullptr, pPrivateDataSlot);
}

Result ContextTable::vkCreateQueryPool(const QueryPoolCreateInfo *pCreateInfo, QueryPool *pQueryPool) const {
    return m_vkCreateQueryPool(m_device, pCreateInfo, nullptr, pQueryPool);
}

Result ContextTable::vkCreateRenderPass(const RenderPassCreateInfo *pCreateInfo, RenderPass *pRenderPass) const {
    return m_vkCreateRenderPass(m_device, pCreateInfo, nullptr, pRenderPass);
}

Result ContextTable::vkCreateRenderPass2(const RenderPassCreateInfo2 *pCreateInfo, RenderPass *pRenderPass) const {
    return m_vkCreateRenderPass2(m_device, pCreateInfo, nullptr, pRenderPass);
}

Result ContextTable::vkCreateSampler(const SamplerCreateInfo *pCreateInfo, Sampler *pSampler) const {
    return m_vkCreateSampler(m_device, pCreateInfo, nullptr, pSampler);
}

Result ContextTable::vkCreateSamplerYcbcrConversion(const SamplerYcbcrConversionCreateInfo *pCreateInfo, SamplerYcbcrConversion *pYcbcrConversion) const {
    return m_vkCreateSamplerYcbcrConversion(m_device, pCreateInfo, nullptr, pYcbcrConversion);
}

Result ContextTable::vkCreateSemaphore(const SemaphoreCreateInfo *pCreateInfo, Semaphore *pSemaphore) const {
    return m_vkCreateSemaphore(m_device, pCreateInfo, nullptr, pSemaphore);
}

Result ContextTable::vkCreateShaderModule(const ShaderModuleCreateInfo *pCreateInfo, ShaderModule *pShaderModule) const {
    return m_vkCreateShaderModule(m_device, pCreateInfo, nullptr, pShaderModule);
}

Result ContextTable::vkCreateSwapchainKHR(const SwapchainCreateInfoKHR *pCreateInfo, SwapchainKHR *pSwapchain) const {
    return m_vkCreateSwapchainKHR(m_device, pCreateInfo, nullptr, pSwapchain);
}

Result ContextTable::vkCreateXcbSurfaceKHR(const XcbSurfaceCreateInfoKHR *pCreateInfo, SurfaceKHR *pSurface) const {
    return m_vkCreateXcbSurfaceKHR(m_instance, pCreateInfo, nullptr, pSurface);
}

void ContextTable::vkDestroyBuffer(Buffer buffer) const {
    return m_vkDestroyBuffer(m_device, buffer, nullptr);
}

void ContextTable::vkDestroyBufferView(BufferView bufferView) const {
    return m_vkDestroyBufferView(m_device, bufferView, nullptr);
}

void ContextTable::vkDestroyCommandPool(CommandPool commandPool) const {
    return m_vkDestroyCommandPool(m_device, commandPool, nullptr);
}

void ContextTable::vkDestroyDebugUtilsMessengerEXT(DebugUtilsMessengerEXT messenger) const {
    return m_vkDestroyDebugUtilsMessengerEXT(m_instance, messenger, nullptr);
}

void ContextTable::vkDestroyDescriptorPool(DescriptorPool descriptorPool) const {
    return m_vkDestroyDescriptorPool(m_device, descriptorPool, nullptr);
}

void ContextTable::vkDestroyDescriptorSetLayout(DescriptorSetLayout descriptorSetLayout) const {
    return m_vkDestroyDescriptorSetLayout(m_device, descriptorSetLayout, nullptr);
}

void ContextTable::vkDestroyDescriptorUpdateTemplate(DescriptorUpdateTemplate descriptorUpdateTemplate) const {
    return m_vkDestroyDescriptorUpdateTemplate(m_device, descriptorUpdateTemplate, nullptr);
}

void ContextTable::vkDestroyDevice() const {
    return m_vkDestroyDevice(m_device, nullptr);
}

void ContextTable::vkDestroyEvent(Event event) const {
    return m_vkDestroyEvent(m_device, event, nullptr);
}

void ContextTable::vkDestroyFence(Fence fence) const {
    return m_vkDestroyFence(m_device, fence, nullptr);
}

void ContextTable::vkDestroyFramebuffer(Framebuffer framebuffer) const {
    return m_vkDestroyFramebuffer(m_device, framebuffer, nullptr);
}

void ContextTable::vkDestroyImage(Image image) const {
    return m_vkDestroyImage(m_device, image, nullptr);
}

void ContextTable::vkDestroyImageView(ImageView imageView) const {
    return m_vkDestroyImageView(m_device, imageView, nullptr);
}

void ContextTable::vkDestroyInstance() const {
    return m_vkDestroyInstance(m_instance, nullptr);
}

void ContextTable::vkDestroyPipeline(Pipeline pipeline) const {
    return m_vkDestroyPipeline(m_device, pipeline, nullptr);
}

void ContextTable::vkDestroyPipelineCache(PipelineCache pipelineCache) const {
    return m_vkDestroyPipelineCache(m_device, pipelineCache, nullptr);
}

void ContextTable::vkDestroyPipelineLayout(PipelineLayout pipelineLayout) const {
    return m_vkDestroyPipelineLayout(m_device, pipelineLayout, nullptr);
}

void ContextTable::vkDestroyPrivateDataSlot(PrivateDataSlot privateDataSlot) const {
    return m_vkDestroyPrivateDataSlot(m_device, privateDataSlot, nullptr);
}

void ContextTable::vkDestroyQueryPool(QueryPool queryPool) const {
    return m_vkDestroyQueryPool(m_device, queryPool, nullptr);
}

void ContextTable::vkDestroyRenderPass(RenderPass renderPass) const {
    return m_vkDestroyRenderPass(m_device, renderPass, nullptr);
}

void ContextTable::vkDestroySampler(Sampler sampler) const {
    return m_vkDestroySampler(m_device, sampler, nullptr);
}

void ContextTable::vkDestroySamplerYcbcrConversion(SamplerYcbcrConversion ycbcrConversion) const {
    return m_vkDestroySamplerYcbcrConversion(m_device, ycbcrConversion, nullptr);
}

void ContextTable::vkDestroySemaphore(Semaphore semaphore) const {
    return m_vkDestroySemaphore(m_device, semaphore, nullptr);
}

void ContextTable::vkDestroyShaderModule(ShaderModule shaderModule) const {
    return m_vkDestroyShaderModule(m_device, shaderModule, nullptr);
}

void ContextTable::vkDestroySurfaceKHR(SurfaceKHR surface) const {
    return m_vkDestroySurfaceKHR(m_instance, surface, nullptr);
}

void ContextTable::vkDestroySwapchainKHR(SwapchainKHR swapchain) const {
    return m_vkDestroySwapchainKHR(m_device, swapchain, nullptr);
}

Result ContextTable::vkDeviceWaitIdle() const {
    return m_vkDeviceWaitIdle(m_device);
}

Result ContextTable::vkEndCommandBuffer(CommandBuffer commandBuffer) const {
    return m_vkEndCommandBuffer(commandBuffer);
}

Result ContextTable::vkEnumerateDeviceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, ExtensionProperties *pProperties) const {
    return m_vkEnumerateDeviceExtensionProperties(m_physical_device, pLayerName, pPropertyCount, pProperties);
}

Result ContextTable::vkEnumerateDeviceLayerProperties(uint32_t *pPropertyCount, LayerProperties *pProperties) const {
    return m_vkEnumerateDeviceLayerProperties(m_physical_device, pPropertyCount, pProperties);
}

Result ContextTable::vkEnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, ExtensionProperties *pProperties) const {
    return m_vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
}

Result ContextTable::vkEnumerateInstanceLayerProperties(uint32_t *pPropertyCount, LayerProperties *pProperties) const {
    return m_vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
}

Result ContextTable::vkEnumerateInstanceVersion(uint32_t *pApiVersion) const {
    return m_vkEnumerateInstanceVersion(pApiVersion);
}

Result ContextTable::vkEnumeratePhysicalDeviceGroups(uint32_t *pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties) const {
    return m_vkEnumeratePhysicalDeviceGroups(m_instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}

Result ContextTable::vkEnumeratePhysicalDevices(uint32_t *pPhysicalDeviceCount, PhysicalDevice *pPhysicalDevices) const {
    return m_vkEnumeratePhysicalDevices(m_instance, pPhysicalDeviceCount, pPhysicalDevices);
}

Result ContextTable::vkFlushMappedMemoryRanges(uint32_t memoryRangeCount, const MappedMemoryRange *pMemoryRanges) const {
    return m_vkFlushMappedMemoryRanges(m_device, memoryRangeCount, pMemoryRanges);
}

void ContextTable::vkFreeCommandBuffers(CommandPool commandPool, uint32_t commandBufferCount, const CommandBuffer *pCommandBuffers) const {
    return m_vkFreeCommandBuffers(m_device, commandPool, commandBufferCount, pCommandBuffers);
}

Result ContextTable::vkFreeDescriptorSets(DescriptorPool descriptorPool, uint32_t descriptorSetCount, const DescriptorSet *pDescriptorSets) const {
    return m_vkFreeDescriptorSets(m_device, descriptorPool, descriptorSetCount, pDescriptorSets);
}

void ContextTable::vkFreeMemory(DeviceMemory memory) const {
    return m_vkFreeMemory(m_device, memory, nullptr);
}

DeviceAddress ContextTable::vkGetBufferDeviceAddress(const BufferDeviceAddressInfo *pInfo) const {
    return m_vkGetBufferDeviceAddress(m_device, pInfo);
}

void ContextTable::vkGetBufferMemoryRequirements(Buffer buffer, MemoryRequirements *pMemoryRequirements) const {
    return m_vkGetBufferMemoryRequirements(m_device, buffer, pMemoryRequirements);
}

void ContextTable::vkGetBufferMemoryRequirements2(const BufferMemoryRequirementsInfo2 *pInfo, MemoryRequirements2 *pMemoryRequirements) const {
    return m_vkGetBufferMemoryRequirements2(m_device, pInfo, pMemoryRequirements);
}

uint64_t ContextTable::vkGetBufferOpaqueCaptureAddress(const BufferDeviceAddressInfo *pInfo) const {
    return m_vkGetBufferOpaqueCaptureAddress(m_device, pInfo);
}

Result ContextTable::vkGetBufferOpaqueCaptureDescriptorDataEXT(const BufferCaptureDescriptorDataInfoEXT *pInfo, void *pData) const {
    return m_vkGetBufferOpaqueCaptureDescriptorDataEXT(m_device, pInfo, pData);
}

void ContextTable::vkGetDescriptorEXT(const DescriptorGetInfoEXT *pDescriptorInfo, size_t dataSize, void *pDescriptor) const {
    return m_vkGetDescriptorEXT(m_device, pDescriptorInfo, dataSize, pDescriptor);
}

void ContextTable::vkGetDescriptorSetLayoutBindingOffsetEXT(DescriptorSetLayout layout, uint32_t binding, DeviceSize *pOffset) const {
    return m_vkGetDescriptorSetLayoutBindingOffsetEXT(m_device, layout, binding, pOffset);
}

void ContextTable::vkGetDescriptorSetLayoutSizeEXT(DescriptorSetLayout layout, DeviceSize *pLayoutSizeInBytes) const {
    return m_vkGetDescriptorSetLayoutSizeEXT(m_device, layout, pLayoutSizeInBytes);
}

void ContextTable::vkGetDescriptorSetLayoutSupport(const DescriptorSetLayoutCreateInfo *pCreateInfo, DescriptorSetLayoutSupport *pSupport) const {
    return m_vkGetDescriptorSetLayoutSupport(m_device, pCreateInfo, pSupport);
}

void ContextTable::vkGetDeviceBufferMemoryRequirements(const DeviceBufferMemoryRequirements *pInfo, MemoryRequirements2 *pMemoryRequirements) const {
    return m_vkGetDeviceBufferMemoryRequirements(m_device, pInfo, pMemoryRequirements);
}

void ContextTable::vkGetDeviceGroupPeerMemoryFeatures(uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, PeerMemoryFeature *pPeerMemoryFeatures) const {
    return m_vkGetDeviceGroupPeerMemoryFeatures(m_device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}

Result ContextTable::vkGetDeviceGroupPresentCapabilitiesKHR(DeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities) const {
    return m_vkGetDeviceGroupPresentCapabilitiesKHR(m_device, pDeviceGroupPresentCapabilities);
}

Result ContextTable::vkGetDeviceGroupSurfacePresentModesKHR(SurfaceKHR surface, DeviceGroupPresentModeKHR *pModes) const {
    return m_vkGetDeviceGroupSurfacePresentModesKHR(m_device, surface, pModes);
}

void ContextTable::vkGetDeviceImageMemoryRequirements(const DeviceImageMemoryRequirements *pInfo, MemoryRequirements2 *pMemoryRequirements) const {
    return m_vkGetDeviceImageMemoryRequirements(m_device, pInfo, pMemoryRequirements);
}

void ContextTable::vkGetDeviceImageSparseMemoryRequirements(const DeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 *pSparseMemoryRequirements) const {
    return m_vkGetDeviceImageSparseMemoryRequirements(m_device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

void ContextTable::vkGetDeviceMemoryCommitment(DeviceMemory memory, DeviceSize *pCommittedMemoryInBytes) const {
    return m_vkGetDeviceMemoryCommitment(m_device, memory, pCommittedMemoryInBytes);
}

uint64_t ContextTable::vkGetDeviceMemoryOpaqueCaptureAddress(const DeviceMemoryOpaqueCaptureAddressInfo *pInfo) const {
    return m_vkGetDeviceMemoryOpaqueCaptureAddress(m_device, pInfo);
}

PFN_vkVoidFunction ContextTable::vkGetDeviceProcAddr(const char *pName) const {
    return m_vkGetDeviceProcAddr(m_device, pName);
}

void ContextTable::vkGetDeviceQueue(uint32_t queueFamilyIndex, uint32_t queueIndex, Queue *pQueue) const {
    return m_vkGetDeviceQueue(m_device, queueFamilyIndex, queueIndex, pQueue);
}

void ContextTable::vkGetDeviceQueue2(const DeviceQueueInfo2 *pQueueInfo, Queue *pQueue) const {
    return m_vkGetDeviceQueue2(m_device, pQueueInfo, pQueue);
}

Result ContextTable::vkGetEventStatus(Event event) const {
    return m_vkGetEventStatus(m_device, event);
}

Result ContextTable::vkGetFenceFdKHR(const FenceGetFdInfoKHR *pGetFdInfo, int *pFd) const {
    return m_vkGetFenceFdKHR(m_device, pGetFdInfo, pFd);
}

Result ContextTable::vkGetFenceStatus(Fence fence) const {
    return m_vkGetFenceStatus(m_device, fence);
}

void ContextTable::vkGetImageMemoryRequirements(Image image, MemoryRequirements *pMemoryRequirements) const {
    return m_vkGetImageMemoryRequirements(m_device, image, pMemoryRequirements);
}

void ContextTable::vkGetImageMemoryRequirements2(const ImageMemoryRequirementsInfo2 *pInfo, MemoryRequirements2 *pMemoryRequirements) const {
    return m_vkGetImageMemoryRequirements2(m_device, pInfo, pMemoryRequirements);
}

Result ContextTable::vkGetImageOpaqueCaptureDescriptorDataEXT(const ImageCaptureDescriptorDataInfoEXT *pInfo, void *pData) const {
    return m_vkGetImageOpaqueCaptureDescriptorDataEXT(m_device, pInfo, pData);
}

void ContextTable::vkGetImageSparseMemoryRequirements(Image image, uint32_t *pSparseMemoryRequirementCount, SparseImageMemoryRequirements *pSparseMemoryRequirements) const {
    return m_vkGetImageSparseMemoryRequirements(m_device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

void ContextTable::vkGetImageSparseMemoryRequirements2(const ImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 *pSparseMemoryRequirements) const {
    return m_vkGetImageSparseMemoryRequirements2(m_device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}

void ContextTable::vkGetImageSubresourceLayout(Image image, const ImageSubresource *pSubresource, SubresourceLayout *pLayout) const {
    return m_vkGetImageSubresourceLayout(m_device, image, pSubresource, pLayout);
}

Result ContextTable::vkGetImageViewOpaqueCaptureDescriptorDataEXT(const ImageViewCaptureDescriptorDataInfoEXT *pInfo, void *pData) const {
    return m_vkGetImageViewOpaqueCaptureDescriptorDataEXT(m_device, pInfo, pData);
}

void ContextTable::vkGetPhysicalDeviceExternalBufferProperties(const PhysicalDeviceExternalBufferInfo *pExternalBufferInfo, ExternalBufferProperties *pExternalBufferProperties) const {
    return m_vkGetPhysicalDeviceExternalBufferProperties(m_physical_device, pExternalBufferInfo, pExternalBufferProperties);
}

void ContextTable::vkGetPhysicalDeviceExternalFenceProperties(const PhysicalDeviceExternalFenceInfo *pExternalFenceInfo, ExternalFenceProperties *pExternalFenceProperties) const {
    return m_vkGetPhysicalDeviceExternalFenceProperties(m_physical_device, pExternalFenceInfo, pExternalFenceProperties);
}

void ContextTable::vkGetPhysicalDeviceExternalSemaphoreProperties(const PhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, ExternalSemaphoreProperties *pExternalSemaphoreProperties) const {
    return m_vkGetPhysicalDeviceExternalSemaphoreProperties(m_physical_device, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}

void ContextTable::vkGetPhysicalDeviceFeatures(PhysicalDeviceFeatures *pFeatures) const {
    return m_vkGetPhysicalDeviceFeatures(m_physical_device, pFeatures);
}

void ContextTable::vkGetPhysicalDeviceFeatures2(PhysicalDeviceFeatures2 *pFeatures) const {
    return m_vkGetPhysicalDeviceFeatures2(m_physical_device, pFeatures);
}

void ContextTable::vkGetPhysicalDeviceFormatProperties(Format format, FormatProperties *pFormatProperties) const {
    return m_vkGetPhysicalDeviceFormatProperties(m_physical_device, format, pFormatProperties);
}

void ContextTable::vkGetPhysicalDeviceFormatProperties2(Format format, FormatProperties2 *pFormatProperties) const {
    return m_vkGetPhysicalDeviceFormatProperties2(m_physical_device, format, pFormatProperties);
}

Result ContextTable::vkGetPhysicalDeviceImageFormatProperties(Format format, ImageType type, ImageTiling tiling, ImageUsage usage, ImageCreateFlags flags, ImageFormatProperties *pImageFormatProperties) const {
    return m_vkGetPhysicalDeviceImageFormatProperties(m_physical_device, format, type, tiling, usage, flags, pImageFormatProperties);
}

Result ContextTable::vkGetPhysicalDeviceImageFormatProperties2(const PhysicalDeviceImageFormatInfo2 *pImageFormatInfo, ImageFormatProperties2 *pImageFormatProperties) const {
    return m_vkGetPhysicalDeviceImageFormatProperties2(m_physical_device, pImageFormatInfo, pImageFormatProperties);
}

void ContextTable::vkGetPhysicalDeviceMemoryProperties(PhysicalDeviceMemoryProperties *pMemoryProperties) const {
    return m_vkGetPhysicalDeviceMemoryProperties(m_physical_device, pMemoryProperties);
}

void ContextTable::vkGetPhysicalDeviceMemoryProperties2(PhysicalDeviceMemoryProperties2 *pMemoryProperties) const {
    return m_vkGetPhysicalDeviceMemoryProperties2(m_physical_device, pMemoryProperties);
}

Result ContextTable::vkGetPhysicalDevicePresentRectanglesKHR(SurfaceKHR surface, uint32_t *pRectCount, Rect2D *pRects) const {
    return m_vkGetPhysicalDevicePresentRectanglesKHR(m_physical_device, surface, pRectCount, pRects);
}

void ContextTable::vkGetPhysicalDeviceProperties(PhysicalDeviceProperties *pProperties) const {
    return m_vkGetPhysicalDeviceProperties(m_physical_device, pProperties);
}

void ContextTable::vkGetPhysicalDeviceProperties2(PhysicalDeviceProperties2 *pProperties) const {
    return m_vkGetPhysicalDeviceProperties2(m_physical_device, pProperties);
}

void ContextTable::vkGetPhysicalDeviceQueueFamilyProperties(uint32_t *pQueueFamilyPropertyCount, QueueFamilyProperties *pQueueFamilyProperties) const {
    return m_vkGetPhysicalDeviceQueueFamilyProperties(m_physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}

void ContextTable::vkGetPhysicalDeviceQueueFamilyProperties2(uint32_t *pQueueFamilyPropertyCount, QueueFamilyProperties2 *pQueueFamilyProperties) const {
    return m_vkGetPhysicalDeviceQueueFamilyProperties2(m_physical_device, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}

void ContextTable::vkGetPhysicalDeviceSparseImageFormatProperties(Format format, ImageType type, SampleCount samples, ImageUsage usage, ImageTiling tiling, uint32_t *pPropertyCount, SparseImageFormatProperties *pProperties) const {
    return m_vkGetPhysicalDeviceSparseImageFormatProperties(m_physical_device, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}

void ContextTable::vkGetPhysicalDeviceSparseImageFormatProperties2(const PhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, SparseImageFormatProperties2 *pProperties) const {
    return m_vkGetPhysicalDeviceSparseImageFormatProperties2(m_physical_device, pFormatInfo, pPropertyCount, pProperties);
}

Result ContextTable::vkGetPhysicalDeviceSurfaceCapabilitiesKHR(SurfaceKHR surface, SurfaceCapabilitiesKHR *pSurfaceCapabilities) const {
    return m_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(m_physical_device, surface, pSurfaceCapabilities);
}

Result ContextTable::vkGetPhysicalDeviceSurfaceFormatsKHR(SurfaceKHR surface, uint32_t *pSurfaceFormatCount, SurfaceFormatKHR *pSurfaceFormats) const {
    return m_vkGetPhysicalDeviceSurfaceFormatsKHR(m_physical_device, surface, pSurfaceFormatCount, pSurfaceFormats);
}

Result ContextTable::vkGetPhysicalDeviceSurfacePresentModesKHR(SurfaceKHR surface, uint32_t *pPresentModeCount, PresentModeKHR *pPresentModes) const {
    return m_vkGetPhysicalDeviceSurfacePresentModesKHR(m_physical_device, surface, pPresentModeCount, pPresentModes);
}

Result ContextTable::vkGetPhysicalDeviceSurfaceSupportKHR(uint32_t queueFamilyIndex, SurfaceKHR surface, Bool *pSupported) const {
    return m_vkGetPhysicalDeviceSurfaceSupportKHR(m_physical_device, queueFamilyIndex, surface, pSupported);
}

Result ContextTable::vkGetPhysicalDeviceToolProperties(uint32_t *pToolCount, PhysicalDeviceToolProperties *pToolProperties) const {
    return m_vkGetPhysicalDeviceToolProperties(m_physical_device, pToolCount, pToolProperties);
}

Bool ContextTable::vkGetPhysicalDeviceXcbPresentationSupportKHR(uint32_t queueFamilyIndex, xcb_connection_t *connection, xcb_visualid_t visual_id) const {
    return m_vkGetPhysicalDeviceXcbPresentationSupportKHR(m_physical_device, queueFamilyIndex, connection, visual_id);
}

Result ContextTable::vkGetPipelineCacheData(PipelineCache pipelineCache, size_t *pDataSize, void *pData) const {
    return m_vkGetPipelineCacheData(m_device, pipelineCache, pDataSize, pData);
}

void ContextTable::vkGetPrivateData(ObjectType objectType, uint64_t objectHandle, PrivateDataSlot privateDataSlot, uint64_t *pData) const {
    return m_vkGetPrivateData(m_device, objectType, objectHandle, privateDataSlot, pData);
}

Result ContextTable::vkGetQueryPoolResults(QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void *pData, DeviceSize stride, QueryResultFlags flags) const {
    return m_vkGetQueryPoolResults(m_device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}

void ContextTable::vkGetRenderAreaGranularity(RenderPass renderPass, Extent2D *pGranularity) const {
    return m_vkGetRenderAreaGranularity(m_device, renderPass, pGranularity);
}

Result ContextTable::vkGetSamplerOpaqueCaptureDescriptorDataEXT(const SamplerCaptureDescriptorDataInfoEXT *pInfo, void *pData) const {
    return m_vkGetSamplerOpaqueCaptureDescriptorDataEXT(m_device, pInfo, pData);
}

Result ContextTable::vkGetSemaphoreCounterValue(Semaphore semaphore, uint64_t *pValue) const {
    return m_vkGetSemaphoreCounterValue(m_device, semaphore, pValue);
}

Result ContextTable::vkGetSwapchainImagesKHR(SwapchainKHR swapchain, uint32_t *pSwapchainImageCount, Image *pSwapchainImages) const {
    return m_vkGetSwapchainImagesKHR(m_device, swapchain, pSwapchainImageCount, pSwapchainImages);
}

Result ContextTable::vkImportFenceFdKHR(const ImportFenceFdInfoKHR *pImportFenceFdInfo) const {
    return m_vkImportFenceFdKHR(m_device, pImportFenceFdInfo);
}

Result ContextTable::vkInvalidateMappedMemoryRanges(uint32_t memoryRangeCount, const MappedMemoryRange *pMemoryRanges) const {
    return m_vkInvalidateMappedMemoryRanges(m_device, memoryRangeCount, pMemoryRanges);
}

Result ContextTable::vkMapMemory(DeviceMemory memory, DeviceSize offset, DeviceSize size, MemoryMapFlags flags, void ** ppData) const {
    return m_vkMapMemory(m_device, memory, offset, size, flags, ppData);
}

Result ContextTable::vkMergePipelineCaches(PipelineCache dstCache, uint32_t srcCacheCount, const PipelineCache *pSrcCaches) const {
    return m_vkMergePipelineCaches(m_device, dstCache, srcCacheCount, pSrcCaches);
}

void ContextTable::vkQueueBeginDebugUtilsLabelEXT(Queue queue, const DebugUtilsLabelEXT *pLabelInfo) const {
    return m_vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
}

Result ContextTable::vkQueueBindSparse(Queue queue, uint32_t bindInfoCount, const BindSparseInfo *pBindInfo, Fence fence) const {
    return m_vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
}

void ContextTable::vkQueueEndDebugUtilsLabelEXT(Queue queue) const {
    return m_vkQueueEndDebugUtilsLabelEXT(queue);
}

void ContextTable::vkQueueInsertDebugUtilsLabelEXT(Queue queue, const DebugUtilsLabelEXT *pLabelInfo) const {
    return m_vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
}

Result ContextTable::vkQueuePresentKHR(Queue queue, const PresentInfoKHR *pPresentInfo) const {
    return m_vkQueuePresentKHR(queue, pPresentInfo);
}

Result ContextTable::vkQueueSubmit(Queue queue, uint32_t submitCount, const SubmitInfo *pSubmits, Fence fence) const {
    return m_vkQueueSubmit(queue, submitCount, pSubmits, fence);
}

Result ContextTable::vkQueueSubmit2(Queue queue, uint32_t submitCount, const SubmitInfo2 *pSubmits, Fence fence) const {
    return m_vkQueueSubmit2(queue, submitCount, pSubmits, fence);
}

Result ContextTable::vkQueueWaitIdle(Queue queue) const {
    return m_vkQueueWaitIdle(queue);
}

Result ContextTable::vkResetCommandBuffer(CommandBuffer commandBuffer, CommandBufferResetFlags flags) const {
    return m_vkResetCommandBuffer(commandBuffer, flags);
}

Result ContextTable::vkResetCommandPool(CommandPool commandPool, CommandPoolResetFlags flags) const {
    return m_vkResetCommandPool(m_device, commandPool, flags);
}

Result ContextTable::vkResetDescriptorPool(DescriptorPool descriptorPool, DescriptorPoolResetFlags flags) const {
    return m_vkResetDescriptorPool(m_device, descriptorPool, flags);
}

Result ContextTable::vkResetEvent(Event event) const {
    return m_vkResetEvent(m_device, event);
}

Result ContextTable::vkResetFences(uint32_t fenceCount, const Fence *pFences) const {
    return m_vkResetFences(m_device, fenceCount, pFences);
}

void ContextTable::vkResetQueryPool(QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const {
    return m_vkResetQueryPool(m_device, queryPool, firstQuery, queryCount);
}

Result ContextTable::vkSetDebugUtilsObjectNameEXT(const DebugUtilsObjectNameInfoEXT *pNameInfo) const {
    return m_vkSetDebugUtilsObjectNameEXT(m_device, pNameInfo);
}

Result ContextTable::vkSetDebugUtilsObjectTagEXT(const DebugUtilsObjectTagInfoEXT *pTagInfo) const {
    return m_vkSetDebugUtilsObjectTagEXT(m_device, pTagInfo);
}

Result ContextTable::vkSetEvent(Event event) const {
    return m_vkSetEvent(m_device, event);
}

Result ContextTable::vkSetPrivateData(ObjectType objectType, uint64_t objectHandle, PrivateDataSlot privateDataSlot, uint64_t data) const {
    return m_vkSetPrivateData(m_device, objectType, objectHandle, privateDataSlot, data);
}

Result ContextTable::vkSignalSemaphore(const SemaphoreSignalInfo *pSignalInfo) const {
    return m_vkSignalSemaphore(m_device, pSignalInfo);
}

void ContextTable::vkSubmitDebugUtilsMessageEXT(DebugUtilsMessageSeverityFlagsEXT messageSeverity, DebugUtilsMessageTypeFlagsEXT messageTypes, const DebugUtilsMessengerCallbackDataEXT *pCallbackData) const {
    return m_vkSubmitDebugUtilsMessageEXT(m_instance, messageSeverity, messageTypes, pCallbackData);
}

void ContextTable::vkTrimCommandPool(CommandPool commandPool, CommandPoolTrimFlags flags) const {
    return m_vkTrimCommandPool(m_device, commandPool, flags);
}

void ContextTable::vkUnmapMemory(DeviceMemory memory) const {
    return m_vkUnmapMemory(m_device, memory);
}

void ContextTable::vkUpdateDescriptorSetWithTemplate(DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData) const {
    return m_vkUpdateDescriptorSetWithTemplate(m_device, descriptorSet, descriptorUpdateTemplate, pData);
}

void ContextTable::vkUpdateDescriptorSets(uint32_t descriptorWriteCount, const WriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount, const CopyDescriptorSet *pDescriptorCopies) const {
    return m_vkUpdateDescriptorSets(m_device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}

Result ContextTable::vkWaitForFences(uint32_t fenceCount, const Fence *pFences, Bool waitAll, uint64_t timeout) const {
    return m_vkWaitForFences(m_device, fenceCount, pFences, waitAll, timeout);
}

Result ContextTable::vkWaitSemaphores(const SemaphoreWaitInfo *pWaitInfo, uint64_t timeout) const {
    return m_vkWaitSemaphores(m_device, pWaitInfo, timeout);
}

} // namespace vull::vkb
// NOLINTEND
